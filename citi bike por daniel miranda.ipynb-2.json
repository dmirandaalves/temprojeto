{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Citi Bike NYC por Daniel Miranda :)\n",
    "Olá! O objetivo desse notebook é de explorar as bases disponiblizadas do Citi Bike NYC, que podem ser encontradas [aqui](https://data.world/citibikenyc/).\n",
    "<br>\n",
    "Para abordar de uma forma sistemática, a divisão desse projeto analítico será nas seguintes etapas:\n",
    "<br>\n",
    "- Contexto;\n",
    "- Pegando os dados;\n",
    "- Análise exploratória;\n",
    "- Preparação dos dados para a modelagem;\n",
    "- Modelagem e otimização;\n",
    "- Desfecho e recomendações futuras;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Contexto\n",
    "A Citi Bike NYC trabalha com o compartilhamento de bicicletas pela cidade de NY e disponibilizou gratuitamente seus dados de uso para eventuais análises.\n",
    "Dessa forma, vamos usar esses dados para **buscar insights que possam alavancar o negócio**, assim como **criar um modelo para prever a utilização das bicicletas**.\n",
    "<br>\n",
    "<br>\n",
    "Os insights têm como objetivo principal gerar discussões e recomendações para o negócio, enquanto a modelagem da utilização das bicicletas pode impactar algumas rotinas da  Citi Bike NYC:\n",
    "- Otimização no headcount de equipes operacionais (externas e internas);\n",
    "- Acuracidade no planejamento do orçamento;\n",
    "- Estimar crescimento para que haja recursos suficientes para os clientes;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Pegando os dados\n",
    "\n",
    "#### 2.1 Trip Data\n",
    "\n",
    "A primeira base de trabalho nos fornece dados de cada viagem, incluindo: tempo de uso, datas de início e término, estações de início e de fim (assim como latitude/longitude), tipo de cliente, gênero e idade.\n",
    "<br>\n",
    "Para uma boa parte da nossa exploração e modelagem, **vamos tratar a base para consolidar o uso por hora de cada dia**.\n",
    "<br>\n",
    "Usaremos as bases entre **Janeiro e Dezembro de 2017**.\n",
    "<br>\n",
    "#### 2.2 Clima\n",
    "\n",
    "Para enriquecer as nossas análises, buscamos os dados de clima disponíveis pelo [National Center for Environmental Information](https://www.ncdc.noaa.gov/). Nossa referência aqui foi buscar a estação meteorológica do Central Park e **de hora em hora**. O objetivo é usar não só os histórico de uso, mas também **o impacto do clima no uso das bicicletas**.\n",
    "<br>\n",
    "Os dados foram recebidos via FTP:\n",
    "<br>\n",
    "#### 2.3 Feriados\n",
    "\n",
    "Da mesma forma, vamos enriquecer nossa base com os feriados para entender o impacto na operação. Os dados foram obtidos no [Office Holidays.com](https://www.officeholidays.com/countries/usa/new-york/2017) e apenas considerados os feriados federais e locais."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Como estou usando um notebook que não pode performar esse volume, vou usar o dask para programação paralela\n",
    "import dask.dataframe as dd\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "data_01 = dd.read_csv('201701-citibike-tripdata.csv')\n",
    "data_02 = dd.read_csv('201702-citibike-tripdata.csv')\n",
    "data_03 = dd.read_csv('201703-citibike-tripdata.csv')\n",
    "data_04 = dd.read_csv('201704-citibike-tripdata.csv')\n",
    "data_05 = dd.read_csv('201705-citibike-tripdata.csv')\n",
    "data_06 = dd.read_csv('201706-citibike-tripdata.csv')\n",
    "data_07 = dd.read_csv('201707-citibike-tripdata.csv')\n",
    "data_08 = dd.read_csv('201708-citibike-tripdata.csv')\n",
    "data_09 = dd.read_csv('201709-citibike-tripdata.csv')\n",
    "data_10 = dd.read_csv('201710-citibike-tripdata.csv')\n",
    "data_11 = dd.read_csv('201711-citibike-tripdata.csv')\n",
    "data_12 = dd.read_csv('201712-citibike-tripdata.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Observei que os três primeiros meses contam com um padrão diferente de colunas, aqui vamos renomear\n",
    "\n",
    "new_columns = ['tripduration', 'starttime', 'stoptime', 'start station id',\n",
    "       'start station name', 'start station latitude',\n",
    "       'start station longitude', 'end station id', 'end station name',\n",
    "       'end station latitude', 'end station longitude', 'bikeid', 'usertype',\n",
    "       'birth year', 'gender']\n",
    "\n",
    "data_01 = data_01.rename(columns=dict(zip(data_01.columns, new_columns)))\n",
    "data_02 = data_02.rename(columns=dict(zip(data_02.columns, new_columns)))\n",
    "data_03 = data_03.rename(columns=dict(zip(data_03.columns, new_columns)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Feito isso, vamos concatenar o um ano de dados\n",
    "data_full = dd.concat([data_01,data_02,data_03,data_04,data_05,data_06,data_07,data_08,data_09,data_10,data_11,data_12], interleave_partitions=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aqui, manipulamos as datas para consolidar\n",
    "data_full['Year'] = data_full['starttime'].str[:4]\n",
    "data_full['Month'] = data_full['starttime'].str[5:7]\n",
    "data_full['Day'] = data_full['starttime'].str[8:10]\n",
    "data_full['Hour'] = data_full['starttime'].str[11:13]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aqui, começamos a manipular por tipo de cliente\n",
    "data_full_subscriber = data_full[data_full['usertype'] == 'Subscriber']\n",
    "data_full_customer = data_full[data_full['usertype'] == 'Customer']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Manipulando a base em células diferentes apenas para uma questão de performance\n",
    "data_full_subscriber_by_day = data_full_subscriber.groupby(['Month','Day','Hour']).count().compute()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Idem, apenas indo para a parte 2\n",
    "data_full_customer_by_day = data_full_customer.groupby(['Month','Day','Hour']).count().compute()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Concluímos a primeira etapa de tratamento\n",
    "import pandas as pd\n",
    "\n",
    "data_full_by_type = pd.merge(data_full_subscriber_by_day['tripduration'],data_full_customer_by_day['tripduration'], left_index = True, right_index = True, how = 'left')\n",
    "data_full_by_type = data_full_by_type.fillna(0)\n",
    "data_full_by_type.rename(columns={'tripduration_x':'Subscribers','tripduration_y':'Customers'}, inplace = True)\n",
    "data_full_by_type['Total'] = data_full_by_type['Subscribers'] + data_full_by_type['Customers']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Aqui, vamos trabalhar a base de temperatura de Nova York. Como é uma base pequena, vamos seguir direto com Pandas\n",
    "weather = pd.read_fwf('weather-nyc.txt')\n",
    "weather['YR--MODAHRMN'] = weather['YR--MODAHRMN'].astype(str)\n",
    "\n",
    "weather['Data Completa'] = pd.to_datetime(weather['YR--MODAHRMN'], format= '%Y%m%d%H%M')\n",
    "\n",
    "#Precisamos corrigir a nossa data, pois está em GMT e precisamos diminuir 5 horas por conta do fuso de NY\n",
    "time_delta = pd.Timedelta(hours=5)\n",
    "weather['Data Corrigida'] = (weather['Data Completa'] - time_delta)\n",
    "\n",
    "#Aqui aproveitamos e tiramos o dia da semana\n",
    "weather['Dia Semana'] = weather['Data Corrigida'].dt.weekday\n",
    "\n",
    "#Vamos incluir o dia da semana\n",
    "dia_da_semana = {0:'Segunda',1:'Terca',2:'Quarta',3:'Quinta',4:'Sexta',5:'Sábado',6:'Domingo'}\n",
    "weather['Dia da Semana'] = weather['Dia Semana'].map(dia_da_semana)\n",
    "\n",
    "#Ajustando datas para concatenar com o restante da base\n",
    "weather['Data Corrigida'] = weather['Data Corrigida'].astype(str)\n",
    "weather['Ano'] = weather['Data Corrigida'].str[0:4]\n",
    "weather['Month'] = weather['Data Corrigida'].str[5:7]\n",
    "weather['Day'] = weather['Data Corrigida'].str[8:10]\n",
    "weather['Hour'] = weather['Data Corrigida'].str[11:13]\n",
    "\n",
    "#Filtrando apenas anos de 2017.\n",
    "weather_nyc = weather[weather['Ano'] == '2017']\n",
    "\n",
    "#Vamos pegar alguns dados que são relevantes\n",
    "weather_nyc['Chuva'] = weather['PCP01 PCP06 PCP24 PCPXX SD'].str[:4]\n",
    "weather_nyc['Neve'] = weather['PCP01 PCP06 PCP24 PCPXX SD'].str[23:]\n",
    "\n",
    "columns = ['Month','Day','Hour','Dia da Semana','Chuva','Neve','CLG','SKC','TEMP','DEWP']\n",
    "\n",
    "weather_nyc_final = weather_nyc[columns].set_index(['Month','Day','Hour'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Agora vamos juntar a base de clientes com a base de clima para um tratamento final de valores faltantes\n",
    "final_data_set = pd.merge(data_full_by_type,weather_nyc_final, left_index = True, right_index = True, how = 'left')\n",
    "\n",
    "#Aqui estamos removendo os dados após as 18h, pois não temos nenhum valor climático\n",
    "data_set = final_data_set.iloc[:11453]\n",
    "\n",
    "#Aqui trabalhamos com os números faltantes. Em relação á neve, zeramos, assim como a Chuva\n",
    "#SKC trabalhará com o valor mais frequente, e temperatura/DEWP entrará com a média\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "data_set['Neve'] = data_set['Neve'].replace('**',0)\n",
    "data_set['Neve'] = data_set['Neve'].replace(' **',0)\n",
    "data_set['SKC'] = data_set['SKC'].replace('***','CLR')\n",
    "data_set['Chuva'] = data_set['Chuva'].replace('****',0)\n",
    "data_set['CLG'] = data_set['CLG'].replace('***','722')\n",
    "\n",
    "data_set['TEMP'] = data_set['TEMP'].replace('****',np.nan).astype('float64')\n",
    "media_temp = np.sum(data_set['TEMP'])/len(data_set['TEMP'])\n",
    "data_set['TEMP'] = data_set['TEMP'].replace(np.nan,media_temp)\n",
    "\n",
    "data_set['DEWP'] = data_set['DEWP'].replace('****',np.nan).astype('float64')\n",
    "media_dewp = np.sum(data_set['DEWP'])/len(data_set['DEWP'])\n",
    "data_set['DEWP'] = data_set['DEWP'].replace(np.nan,media_dewp)\n",
    "#Temos a falta de um dado de clima, vamos remove-lo da nossa base\n",
    "data_set = data_set.drop(('09','12','14'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nossa última base vamos construir manualmente com os feriados\n",
    "hours = ['00','01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23']\n",
    "\n",
    "#Feriado 1 = 02 de janeiro\n",
    "\n",
    "feriado1 = pd.DataFrame(hours)\n",
    "feriado1['Month'] = '01'\n",
    "feriado1['Day'] = '02'\n",
    "\n",
    "#Feriado 2 = 16 de janeiro\n",
    "feriado2 = pd.DataFrame(hours)\n",
    "feriado2['Month'] = '01'\n",
    "feriado2['Day'] = '16'\n",
    "\n",
    "#Feriado 3 = 20 de fevereiro\n",
    "feriado3 = pd.DataFrame(hours)\n",
    "feriado3['Month'] = '02'\n",
    "feriado3['Day'] = '20'\n",
    "\n",
    "#Feriado 4 = 29 de maio\n",
    "feriado4 = pd.DataFrame(hours)\n",
    "feriado4['Month'] = '05'\n",
    "feriado4['Day'] = '29'\n",
    "\n",
    "#Feriado 5 = 04 de julho\n",
    "feriado5 = pd.DataFrame(hours)\n",
    "feriado5['Month'] = '07'\n",
    "feriado5['Day'] = '04'\n",
    "\n",
    "#Feriado 6 = 04 de setembro\n",
    "feriado6 = pd.DataFrame(hours)\n",
    "feriado6['Month'] = '09'\n",
    "feriado6['Day'] = '04'\n",
    "\n",
    "#Feriado 7 = 09 de outubro\n",
    "feriado7 = pd.DataFrame(hours)\n",
    "feriado7['Month'] = '10'\n",
    "feriado7['Day'] = '09'\n",
    "\n",
    "#Feriado 8 = 10 de novembro\n",
    "feriado8 = pd.DataFrame(hours)\n",
    "feriado8['Month'] = '11'\n",
    "feriado8['Day'] = '10'\n",
    "\n",
    "#Feriado 9 = 23 de novembro\n",
    "feriado9 = pd.DataFrame(hours)\n",
    "feriado9['Month'] = '11'\n",
    "feriado9['Day'] = '23'\n",
    "\n",
    "#Feriado 10 = 25 de dezembro\n",
    "feriado10 = pd.DataFrame(hours)\n",
    "feriado10['Month'] = '12'\n",
    "feriado10['Day'] = '25'\n",
    "\n",
    "feriados = pd.concat([feriado1,feriado2,feriado3,feriado4,feriado5,feriado6,feriado7,feriado8,feriado9,feriado10])\n",
    "feriados['Feriado'] = 1\n",
    "feriados.rename(columns={0:'Hour'}, inplace = True)\n",
    "lista_de_feriados = feriados.set_index(['Month','Day','Hour'])\n",
    "\n",
    "#Juntando os nossos feriados na base e ajustando os tipos de variáveis\n",
    "data_set_final = pd.merge(data_set, lista_de_feriados, left_index = True, right_index = True, how = 'left')\n",
    "data_set_final['Feriado'] = data_set_final['Feriado'].replace(np.nan,0)\n",
    "data_set_final['Customers'] = data_set_final['Customers'].astype('int64')\n",
    "data_set_final['Total'] = data_set_final['Total'].astype('int64')\n",
    "data_set_final['Chuva'] = data_set_final['Chuva'].astype('float64')\n",
    "data_set_final['Neve'] = data_set_final['Neve'].astype('float64')\n",
    "data_set_final['TEMP'] = data_set_final['TEMP'].astype('int64')\n",
    "data_set_final['DEWP'] = data_set_final['DEWP'].astype('int64')\n",
    "data_set_final['Feriado'] = data_set_final['Feriado'].astype('object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Subscribers</th>\n",
       "      <th>Customers</th>\n",
       "      <th>Total</th>\n",
       "      <th>Dia da Semana</th>\n",
       "      <th>Chuva</th>\n",
       "      <th>Neve</th>\n",
       "      <th>CLG</th>\n",
       "      <th>SKC</th>\n",
       "      <th>TEMP</th>\n",
       "      <th>DEWP</th>\n",
       "      <th>Feriado</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <th>Day</th>\n",
       "      <th>Hour</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">01</td>\n",
       "      <td rowspan=\"5\" valign=\"top\">01</td>\n",
       "      <td>00</td>\n",
       "      <td>295</td>\n",
       "      <td>58</td>\n",
       "      <td>353</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55</td>\n",
       "      <td>CLR</td>\n",
       "      <td>44</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>01</td>\n",
       "      <td>316</td>\n",
       "      <td>34</td>\n",
       "      <td>350</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>80</td>\n",
       "      <td>CLR</td>\n",
       "      <td>44</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>02</td>\n",
       "      <td>256</td>\n",
       "      <td>24</td>\n",
       "      <td>280</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55</td>\n",
       "      <td>CLR</td>\n",
       "      <td>45</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>03</td>\n",
       "      <td>180</td>\n",
       "      <td>26</td>\n",
       "      <td>206</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>722</td>\n",
       "      <td>SCT</td>\n",
       "      <td>44</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>04</td>\n",
       "      <td>87</td>\n",
       "      <td>9</td>\n",
       "      <td>96</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>50</td>\n",
       "      <td>CLR</td>\n",
       "      <td>45</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">12</td>\n",
       "      <td rowspan=\"5\" valign=\"top\">31</td>\n",
       "      <td>14</td>\n",
       "      <td>573</td>\n",
       "      <td>31</td>\n",
       "      <td>604</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>110</td>\n",
       "      <td>CLR</td>\n",
       "      <td>15</td>\n",
       "      <td>-4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>574</td>\n",
       "      <td>14</td>\n",
       "      <td>588</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>722</td>\n",
       "      <td>SCT</td>\n",
       "      <td>14</td>\n",
       "      <td>-5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>510</td>\n",
       "      <td>17</td>\n",
       "      <td>527</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>722</td>\n",
       "      <td>CLR</td>\n",
       "      <td>13</td>\n",
       "      <td>-5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>398</td>\n",
       "      <td>11</td>\n",
       "      <td>409</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>722</td>\n",
       "      <td>CLR</td>\n",
       "      <td>13</td>\n",
       "      <td>-5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>320</td>\n",
       "      <td>26</td>\n",
       "      <td>346</td>\n",
       "      <td>Domingo</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>722</td>\n",
       "      <td>CLR</td>\n",
       "      <td>12</td>\n",
       "      <td>-5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11452 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Subscribers  Customers  Total Dia da Semana  Chuva  Neve  CLG  \\\n",
       "Month Day Hour                                                                  \n",
       "01    01  00            295         58    353       Domingo    0.0   0.0   55   \n",
       "          01            316         34    350       Domingo    0.0   0.0   80   \n",
       "          02            256         24    280       Domingo    0.0   0.0   55   \n",
       "          03            180         26    206       Domingo    0.0   0.0  722   \n",
       "          04             87          9     96       Domingo    0.0   0.0   50   \n",
       "...                     ...        ...    ...           ...    ...   ...  ...   \n",
       "12    31  14            573         31    604       Domingo    0.0   0.0  110   \n",
       "          15            574         14    588       Domingo    0.0   0.0  722   \n",
       "          16            510         17    527       Domingo    0.0   0.0  722   \n",
       "          17            398         11    409       Domingo    0.0   0.0  722   \n",
       "          18            320         26    346       Domingo    0.0   0.0  722   \n",
       "\n",
       "                SKC  TEMP  DEWP Feriado  \n",
       "Month Day Hour                           \n",
       "01    01  00    CLR    44    25       0  \n",
       "          01    CLR    44    26       0  \n",
       "          02    CLR    45    25       0  \n",
       "          03    SCT    44    25       0  \n",
       "          04    CLR    45    24       0  \n",
       "...             ...   ...   ...     ...  \n",
       "12    31  14    CLR    15    -4       0  \n",
       "          15    SCT    14    -5       0  \n",
       "          16    CLR    13    -5       0  \n",
       "          17    CLR    13    -5       0  \n",
       "          18    CLR    12    -5       0  \n",
       "\n",
       "[11452 rows x 11 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Agora temos uma base para começar a trabalhar na exploração\n",
    "data_set_final\n",
    "\n",
    "#A seguir, apenas a demontração da redução da nossa base de 16 MM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Análise Exploratória\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x331956588>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_style(\"darkgrid\")\n",
    "\n",
    "plt.figure(figsize=(15,5))\n",
    "plt.bar(range(len(data_set_final.groupby('Month').count()['Subscribers'])),data_set_final.reset_index().groupby('Month').sum()['Subscribers'], label = 'Subscribers')\n",
    "plt.bar(range(len(data_set_final.groupby('Month').count()['Customers'])),data_set_final.reset_index().groupby('Month').sum()['Customers'], label = 'Customers')\n",
    "plt.xticks(range(len(data_set_final.groupby('Month').count()['Total'])),['J','F','M','A','M','J','J','A','S','O','N','D'])\n",
    "plt.title('Bicicletas alugadas ao longo de 2017 \\n')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Temos uma rampagem agressiva do primeiro para o segundo trimestre. A principal causa potencial para explorar é a estação do ano, especificamente porque de Dezembro a Março estamos falando do **inverno** no hemisfério norte."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribuição de Temperatura ao longo do ano de 2017 \\n')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "sns.boxplot(x='Month', y='TEMP', data=data_set_final.reset_index())\n",
    "plt.xticks(range(len(data_set_final.groupby('Month').count()['Total'])),['J','F','M','A','M','J','J','A','S','O','N','D'])\n",
    "plt.title('Distribuição de Temperatura ao longo do ano de 2017 \\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Aqui fortalecemos a hipótese do impacto da temperatura no uso das bicicletas, pois é possível perceber a diferença nos meses do inverno.\n",
    "<br>\n",
    "<br>\n",
    "A primeira recomendação é a de **gerar incentivo para novos cadastros para experimentação antes do inverno** para suavizar essa diferença. Essa lacuna na utilização gera uma oportunidade para **novas parcerias para levar clientes potenciais para as bicicletas**.\n",
    "<br>\n",
    "<br>\n",
    "Espera-se que as campanhas alavanquem o número de day-passes (customers), que reflitirá em inscritos (subscribers)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x35b9ffac8>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4EAAAFHCAYAAAAfhElMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3deZgdZZn38W8vSUggC0srqCQBwVsUXALKLhlFGYwKKiOOo4ggGTUoURAiBhOU0eCCg4KgLAZBfVX2kYnAjAqIKIIoIngTwIAoYMiYPST08v5RFWnaTnen06c7p+v7uS4uzqm6q/o5dXfn9K+fqjoNHR0dSJIkSZKqoXGoByBJkiRJGjyGQEmSJEmqEEOgJEmSJFWIIVCSJEmSKsQQKEmSJEkVYgiUJEmSpAppHuoBSJI2TURMBh4EflcuagJWAx/LzFsjYi9gVmYe0cM+Pg08kJnf6qGmA2jJzCd7qHkVcGxmfmDjX0nfRcR84J7M/GKNv852wOLMbKjl1+mriPgpcE5mXj7UYwGIiCOA4zNz6kZs0wjMA6YB7cBC4N8zc3FEjAEuBF5J8YfqUzLz6i7bfxrYJjOPL59/BXhNp5LnA49l5sv6/cIkaZgzBErS8LAmM1+x/klEvAOYD+yamXcAGwyAAJn5qQEax0uBFwzQvjQ8HQPsCUzJzLUR8XngS8BRwFxgZWbuFhETgdsi4o7MfDQiXgD8J3Ao8M31O8vMj6x/XP5B5JZyX5KkDTAEStLwtC3wGEBETKWYPdo9IrYCvgrsD7QCVwOfpPil+p7M/GJE7A18BdgSWAeclJk/7rzziDgW+BDFbM0S4HhgFfBpYHxEfBM4FvgysA8wFmgA3l/OTh4AnEUxa9kBfC4zr+jyNRo3tH2XumfNUHZ+HhGzynGsAG4GDs/MyRHxIuDccr87AL8BjszMpyLibcB/UMym/qrT19kSOA/YtTy+K4B3ZWaW28ymmNlqAz6emTd3GWdP27+gXDe5fJ2XZOYX6EFEHA7MKXuwgmLm9/aImFvuZwdgEvBn4N2Z+Vg5U3seMJJi9nhSud1PI2I68JFy/E9QzPDd383X/TTwbxR9X9hp+UjgTOAgir7eBXwkM5d32cXvy+Oztnx+BzCjfPxW4F0AmflIRNwIvIPie+VY4KfAvcA2GzgsFwBnZeZvNnjgJEleEyhJw8ToiPhN+d/DwNnA57qp+zSwBbAb8AqKMHjQ+pURMYIiGH46M3cHjgPOLgPZ+pqDgPcCB2bmK4HPA1dl5p+ATwG3ZOb7gL2B5wH7ZuZLgEuAWeVuTqf4ZX1Pipmh13Yz1p6271VEHAIcDbyKYuZpbKfVx1EErX2AXYCdgGkR8VzgYuDt5dge7rTNocDSzNw3M19EERCPL9d9AfhQZu4FnAZM7WZIPW3/beAnmbkHRU/eHRHv7OG1vRg4vxznyymO+zURMa4sORD4l8x8MUU4/0BENANXAqeVp0p+heJ7gIh4LXAy8E/l/r4DXB0RDV2+7mHA28vt9gPGd1o9i+IPC3uW+/gLxWmfz5KZt2Xmr8v9bV2O/Qfl6h2BP3Uqf5RyZjkzT8/McyiCdnfH5FBgYvm6JEk9cCZQkoaHrqeDHkzxS/weXeoOppj5aaOY8TmorD+6XL8H0JaZ1wFk5p3lMiJi/T6mUQSnn3datnVEPGt2JjNvi4jZwL9HxAspgtGKcvX3gXMj4s3A/wCndn1BvWzfF28EfpCZS8vxnwu8rlx3CvD6iDgZeBFF2NwKOAD4XWbeW9Z9HfhsOZ7LI+KhiPhw+fqnAreVdf8PuCoirgNupAjGXV9Pt9uXM4T7A28o65aV1zweWu63O68F/jczHyq3+XFE/JUi7AL8tNMM3F0UM2d7lLULyv//JCLuKWv+GfheZi4u182PiLMpZhT/2OnrHgxcmZkrymN6McXsIcCbgAnlcYVitvGvGxg/ZU+vBn5GMSsLxR+nOzqVNVB8n/bFRylmlPtaL0mV5UygJA1Dmfk/wAPAq7usaqXTL9kRsWNEbLuh9WXN7uUs0npNwKWZ+YoyeE4B9gL+1mW7acB15dNrKGauGsrxfZ0ilNwIHALcHRFb9HX7bjSU24zs8lo613cOB98FplPM9H0Z+HWn2s7btHYazweBiyhOE/1OuY/1r+eTFAHyDorZx2edCtrL9o3dvK5GYMQGXis8cxrthrZZ02l5R7n/rscDnjkm3e2vYQNj6Pb4lPs4odP3xavZwLWoEfFPFAH6ksz8QGau/9qPUATy9Z5HMRvYo4hooZg5/kFvtZIkQ6AkDUvlNW+TKWaBOvsf4L0R0RgRo4DL6XQ6KJBAR0S8vtzPFODHPPv94nrgXyNih/L5B4D/LR+38kxweD3wX5l5HkU4OpwiKBARPwdemZnzKcLYBGD7LmPd4PZdLKYIoVBeT1a6Dnh7RKw/ZfFYngk6h1Cc8vq98vne5b5vBl4aES8vlx/daX+HAPMz8yKK4/RmoCkimiNiETAmM8+nuFbyZeXxpbfty1m1X1BeF1eO9yiKgLwh/wscEhE7l9u8luJUyl/2sM19wNqI+Odym1dTBPEO4EfAO8swRUS8j+Kavwe67GMB8C8RMaE8Rfg9ndZdDxwfESPLdRfQzSnJ5ffUVcBR3dzd9RqK7wfK6yT/GfhhD69pvf2BX2Xmqj7USlLlGQIlaXjofE3gbyjC3fRubuxxOsXNXn5LERD/OzOvXL+yvFnH24A55X7OB96Wmes61dxAcQOQGyPiborg9bZyNucXwM4RcWW57dSI+B3FTNuDwE5lQDgZ+HRE3EVxs4/TM3NRl7H2tH1nH6E4tfTXFNc6PlaO88cUQeS2iLiD4vq11eU2p1Kcvvk7ilM+bwJ2KU+HfBfw7XJ/O3X6Ol+kODX1boo7UP663KYVmAl8p9zmB8AxnW580uP25bp/A15Xjud2imv35rMB5emqHwKuLE/pnAe8OTOX9bBNK8X1fHPL434i8DiwOjNvpJgR/XFE/J7ims83ZWZ7l338N8U1k3dQBM7OX+8zwCKK76t7KWYMT+xmKJ8r183r9D17VbluDrBVOYb/obiBzIMbek2d7Fp+bUlSHzR0dHQ9+0OSpPoXxecj7peZXymffwzYOzOPHNqRDZ2I+ALwxcx8IiJ2pPhjwM7rr5uUJFWDN4aRJA1X9wOnlB990EFxvdn0oR3SkHsY+N+IeJpnPnLDAChJFeNMoCRJkiRViNcESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqpHmoB1AL7e3tHW1tHUM9jGGhqakBj2X9sn/1y97VN/tX3+xffbN/9c3+DZwRI5qeBFq6WzcsQ2BbWwdLl64e6mEMCxMmjPFY1jH7V7/sXX2zf/XN/tU3+1ff7N/AaWkZ+/CG1vUaAiOiCbgACKANeB/QAMwHOoB7gBmZ2R4Rc4BpQCswMzNvj4hdalG70UdBkiRJktSnawLfDJCZ+wOfAs4q/5udmQdSBMLDImIKcBCwN/BO4Nxy+1rVSpIkSZI2Uq8hMDOvBqaXTycBTwB7AjeVyxYABwMHADdkZkdmPgI0R0RLDWslSZIkSRupT9cEZmZrRFwCvBU4AnhTZq6/YnMFMB4YByzptNn65Q01ql28ofE2NTUwYcKYvrw09aKpqdFjWcfsX/2yd/XN/tU3+1ff7N/mp7X1af785z+zdu1aOjp6vunLX//a0GuNntHQ0MCoUaN4/vOfT3PziD5v1+cbw2TmeyPiFOCXwOhOq8YCS4Hl5eOuy9trVLtB3hhm4Hhxbn2zf/XL3tU3+1ff7F99s3+bnyeffIwtthhDS0sLDQ0NPdY2NTXS1tbeY42e0dHRwapVy1m06BG2226HZ61raRm7ga36cDpoRLwnIj5RPl1NEdTuiIip5bJDgVuAW4FDIqIxIiYCjZn5JHBXjWolSZIkbeZaW9ex5Zbjeg2A2ngNDQ1sueU4WlvXbdR2fZkJvBL4ZkTcDIwAZgL3ARdExMjy8eWZ2RYRtwC3UYTLGeX2J9aoVpIkSVIdMADWTn+ObcNwPOf26afbOjwNYGB4SkV9s3/1y97VN/tX3+xffbN/m5/HH3+Y7bef9PfnW40bzehRA/dx5WvWtrJy+ZoB21896nqMAVpaxt4J7NVd/bD8sHhJkiRJm6fRo5qZPOu6AdvfonnTWNlLzaWXzueOO26nsbGBhoYGpk+fwYtfvNs/1D322F+YM+dUvvGN+Zs8riVLnuSb37yQk06axRFHvJlvf/tyRo0atcn7HQiGQEmSJEnD1h//+BC33noz5513EQ0NDSxcmJxxxlwuueS7Nf262267HSedNKumX6O/DIGSJEmShq2tt96GJ554nOuuu4a9996PXXcNLrjgEo4/fjof//ipTJo0mauvvpwlS5bwxje+maVL/8Ypp3yUv/3tb+y33wEcffT7uemmH3PZZZfQ3NzMDjs8j9mzT2fZsqX8x3/MZeXKlXR0dDB79unccMMC7rnnbtasWcOsWafx2c+e/vdZxS984bM8/vhjbL31NsyePZempma+8IXP8uijf6K9vZ3jjvsgU6bsxXve8w523HESI0aM4O1vfwfnnPOfNDc3M3bsWObMOYMxY7bc5GNiCJRUCQN9/cFg6OnWzpsjr8mQJG2OJkyYwLx5Z3HFFd/j4osvYIsttmD69A9tsH7NmjWcdtpnGD16NDNmHMf++7+GG2+8niOPfBcHH3wICxb8kFWrVnHJJRdzwAGv4fDDj+DOO3/Ffff9HoBJk3Zi5syTeOyxvzxrv4cffgS7774HX/va2Vx77dU0NzczfvwEPvGJT7Fs2VJmzJjOZZd9nzVr1nD00cfyohe9mHPPPZuDDvon/vVf38PPfnYzy5evMARKUl8N9PUH+kd9uSZDkqTB9uijf2LLLbfk1FPnAPCHP9zLSSedwLbbbvv3ms73ytxll13ZaqutANhtt5fypz89woc//FEuvXQ+V199BZMmTeY1r5nKI488zLRpbwFgzz1fBcBFF32diROffYMWgObmEey++x4A7L77y/nVr35JR0cHd999F/feew8AbW2tLFtWfBz6xImTAXjPe97Ht751MSec8EFaWp7DS16y+4AcE0OgJGmz50xu7TmTK2m4evDBhVx11eWceeaXGTVqFDvuOJGtttqKcePGs2TJk0yaNJn77/8D223XAsDDDy9i9erVjBw5knvvvYe3vOWtXHvtVRx77HS23nobPv/5/+Dmm3/K5MmT+cMf7mXXXV/Eb37za37+858xatQoGhv/8SMbWlufZuHCZNddg9/+9i523vmFtLa28pznPIejjjqGtWuf4pJLLmbs2HHAMx/7cOONC3jjG9/E8cfP5NJLv8m1117JMcdM3+RjUl/vqJKkSnImt/acyZU0WNasbWXRvGkDur+eHHTQa1m06I9Mn340Y8aMpr29gw996ARGjGjmrLPO5DnPee7fAyDA2LHjmDPnEyxd+jde+9o3sNNOO7Pbbi9l5swZjB8/njFjxrDffgewzz7787nPfZrrr/9vGhoamDXrNH70o+7fq0aMGMHll3+PRx/9E9tvvz0f/OCHaW9v58wzz+D446ezatVK3vrWf6GxsfFZ2734xS/ljDPmMmbMGJqbmzn55E9u6uEC/JxA9cLP2qlv9u8ZLS1jDRE1tmjeNBYvXlGTfdu/2qtl/+qN/3bWN/u3+enuM+w2pKmpkba29hqPaPjZ2M8JbOxuoSRJkiRpeDIESpIkSVKFGAIlSZIkqUIMgZIkSZJUId4dVJIk1Uw9frwH+BEfkoa3+vtXWZIk1Q0/3mNw+BEfqifbjm+mceToAdtf+7o1LFnW88dE6NkMgZIkSZIGTePI0TB3/MDtb+4yoOePuHnooQc577yv8NRTT7FmzRr23Xd/jjlm+t8/lL03y5cv4xe/uI03vOGfB2DEQ89rAiVJkiQNWytWrGDu3FP5yEdO5Ktf/Tpf//o3efDBB7jmmiv6vI8HHljIrbfeVMNRDi5nAiVJkiQNWz/72U1MmfIqdtxxIgBNTU3Mnn0699xzN3PmfILTT/8cAG95yyFce+313HTTj7nssktobm5mhx2ex+zZp/Otb13MAw8s5JprruTVr96HefM+Q2trKw0NDZxwwknsuuuLOPLIw9l995fx6KN/YsqUvVi1aiX33fd7Jk6cxGmnfYYnnnicz3/+s6xbt5aRI0dx8smn0t7ezimnfJRx48az7777M3r0GBYs+CGNjY287GWvYMaME2pyTAyBkiRJkoatJ59czPOe9/xnLRszZgzNzd1HoRtvvJ4jj3wXBx98CAsW/JBVq1Zx1FHHcM01V3DYYW9j9uyTOeKIIznwwKksXJjMm/cZLrroUh5//DHOPvt8tttuOw499LV84xvz+ehHT+Yd7ziMFStWcO65Z3PEEUey7777c8cdt3P++ecwffqH+L//W8JFF13GiBEjeP/7j2LmzI+z++57cNVVl9Pa2rrBcW4KQ6AkSZKkYeu5z92B++//w7OW/eUvf+a3v73rWcs6OjoA+PCHP8qll87n6quvYNKkybzmNVOfVbdo0SJe/vIpAOy6a/DXvz4BwLhx49l+++0BGD16NDvttDMAW265FevWreWhhx7g0ku/ybe/fQnA38PdDjs8jxEjRgBw6qmf4rvfvYzzz/8qL33pHgN1CP6B1wRKkiRJGrb23/8AfvnLn/PnPz8KQGtrK1/96pdpampiyZIlADz++GMsX74MgGuvvYpjj53OOed8g46ODm6++ac0NjbS3l6ExMmTJ3P33UWAXLgw2WabbQF6vcnMxImT+eAHP8w553yDj3/8VKZOfV253TOR7Nprr+akkz7BOed8g4ULk9/97rcDeCSe4UygJEmSpEHTvm5NeUfPgdtfT7bccis++cnTOfPMM2hvb2f16tXsv/+BvOtdR3Hvvfdw3HHvZfLkndhhh+KU0d12eykzZ85g/PjxjBkzhv32O4B169bx0EMP8P3vf4cZM2Zy5pln8N3vXkZrayuf+MRpfRrnjBkn8KUvzWPdunWsXfsUJ5xw0j/UvPCFu3DccUcxYcLWtLS08JKX7L7xB6QPGtZPew4nTz/d1rF06eqhHsawMGHCGDyW9cv+PaOlZayfVVZji+ZNY/Hinm/R3V/2r/Zq1T97Nzhq+fNXb3zv2/w8/vjDbL/9pD7VNjU10tbWXuMRDT/dHeOWlrF3Ant1V+/poJIkSZJUIYZASZIkSaoQQ6AkSZKkmhqOl6BtLvpzbA2BkiRJkmqmuXkkq1YtNwjWQEdHB6tWLae5eeRGbefdQSVJkiTVzNZbt/C3vy1m5cqlvdY2NDQYFjdSc/NItt66ZeO2qdFYJEmSJImmpma2226HPtV6d9fB4emgkiRJklQhhkBJkiRJqhBDoCRJkiRViCFQkiRJkirEG8NIkiSpW1uNG83oUfX362JLy9ihHsJGWbO2lZXL1wz1MFQh9fdTLUmSpEExelQzk2ddN9TDGPYWzZvGyqEehCrFECj1kX8NrT3/EipJklR79fcbrTRE/Gto7fmXUEmSpNrzxjCSJEmSVCE9zgRGxAjgYmAyMAo4A3gU+C9gYVl2XmZ+LyLmANOAVmBmZt4eEbsA84EO4B5gRma2b2rtQL14SZIkSaqa3mYC3w0sycwDgUOBc4ApwFmZObX873sRMQU4CNgbeCdwbrn9WcDscvsG4LABqpUkSZIk9UNv1wT+ALi80/NWYE8gIuIwitnAmcABwA2Z2QE8EhHNEdFS1t5UbrsAeAOQm1qbmYt7GnRTUwMTJozpy+tXL5qaGj2WGlR+v9U3+1ff7F99s3/1zf4V/N1zcPQYAjNzJUBEjKUIg7MpTgu9MDPvjIhPAnOApcCSTpuuAMYDDWWA67xs3ADU9hgC29o6WLp0dU8l6qMJE8Z4LEv1dJfNelar7zf7NzjsX32rRf/s3eCxf/XN37cK/u45cHr6+e31xjARsSPwE+DSzPwOcFVm3lmuvgp4JbAc6PxVxlIEw/Zulg1ErSRJkiSpH3oMgRHxXOAG4JTMvLhcfH1EvLp8/DrgTuBW4JCIaIyIiUBjZj4J3BURU8vaQ4FbBqhWkiRJktQPvV0TeCqwNXBaRJxWLvsY8J8RsQ54HJiemcsj4hbgNopgOaOsPRG4ICJGAvcBl2dm2wDUSpIkSZL6obdrAk8ATuhm1X7d1M4F5nZZdj/F3T0HtFaSJEmS1D9+WLwkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCmnuaWVEjAAuBiYDo4AzgHuB+UAHcA8wIzPbI2IOMA1oBWZm5u0RsUstagfu5UuSJElStfQ2E/huYElmHggcCpwDnAXMLpc1AIdFxBTgIGBv4J3AueX2taqVJEmSJPVDbyHwB8BpnZ63AnsCN5XPFwAHAwcAN2RmR2Y+AjRHREsNayVJkiRJ/dDj6aCZuRIgIsYClwOzgS9mZkdZsgIYD4wDlnTadP3yhhrVLu5p3E1NDUyYMKanEvVRU1Ojx1KDyu+3+mb/6pv9q2/2r77Von9twBYjmgZ8v7XW0jJ2qIewUZ56uo16O8o9hkCAiNgRuAr4WmZ+JyI+32n1WGApsLx83HV5e41qe9TW1sHSpat7K1MfTJgwxmNZqrd/kOpVrb7f7N/gsH/1rRb9s3eDx/7Vt1r1b/Ks6wZ8v3q2RfOmsXjxiqEexj/o6ee3x9NBI+K5wA3AKZl5cbn4roiYWj4+FLgFuBU4JCIaI2Ii0JiZT9awVpIkSZLUD73NBJ4KbA2cFhHrrw08AfhKRIwE7gMuz8y2iLgFuI0iWM4oa08ELqhBrSRJkiSpH3q7JvAEitDX1UHd1M4F5nZZdn8taiVJkiRJ/eOHxUuSJElShRgCJUmSJKlCDIGSJEmSVCGGQEmSJEmqEEOgJEmSJFWIIVCSJEmSKsQQKEmSJEkVYgiUJEmSpAoxBEqSJElShRgCJUmSJKlCDIGSJEmSVCHNQz2AKtlq3GhGj6q/Q97SMnaoh9Bna9a2snL5mqEehiRJkrTZqr9EUsdGj2pm8qzrhnoYw9qiedNYOdSDkCRJkjZjng4qSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqpLkvRRGxN3BmZk6NiCnAfwELy9XnZeb3ImIOMA1oBWZm5u0RsQswH+gA7gFmZGb7ptYOyCuXJEmSpArqNQRGxMnAe4BV5aIpwFmZ+aVONVOAg4C9gR2BK4BXAWcBszPzpxFxPnBYRDw8ALWSJEmSpH7oy0zgg8DbgEvL53sCERGHUcwGzgQOAG7IzA7gkYhojoiWsvamcrsFwBuA3NTazFzc04CbmhqYMGFMX16/hiF7X9/sX32zf/XN/tU3+1ff7F99q7f+9RoCM/OKiJjcadHtwIWZeWdEfBKYAywFlnSqWQGMBxrKANd52bgBqO0xBLa1dbB06ereXtqga2kZO9RDqIRa9d7+DQ77V9/sX32rRf/s3eCxf/XN/tW3esse/bkxzFWZeef6x8ArgeVA568yliIYtnezbCBqJUmSJEn90J8QeH1EvLp8/DrgTuBW4JCIaIyIiUBjZj4J3BURU8vaQ4FbBqhWkiRJktQPfbo7aBcfBM6JiHXA48D0zFweEbcAt1EEyxll7YnABRExErgPuDwz2wagVpIkSZLUD30KgZm5CNinfPxrYL9uauYCc7ssu5/i7p4DWitJkiRJ6h8/LF6SJEmSKsQQKEmSJEkVYgiUJEmSpAoxBEqSJElShRgCJUmSJKlCDIGSJEmSVCGGQEmSJEmqEEOgJEmSJFWIIVCSJEmSKsQQKEmSJEkVYgiUJEmSpAoxBEqSJElShRgCJUmSJKlCDIGSJEmSVCGGQEmSJEmqEEOgJEmSJFWIIVCSJEmSKsQQKEmSJEkVYgiUJEmSpAoxBEqSJElShRgCJUmSJKlCDIGSJEmSVCGGQEmSJEmqEEOgJEmSJFWIIVCSJEmSKsQQKEmSJEkVYgiUJEmSpAoxBEqSJElShRgCJUmSJKlCDIGSJEmSVCGGQEmSJEmqEEOgJEmSJFWIIVCSJEmSKsQQKEmSJEkVYgiUJEmSpAoxBEqSJElShTT3pSgi9gbOzMypEbELMB/oAO4BZmRme0TMAaYBrcDMzLy9VrUD9NolSZIkqXJ6nQmMiJOBC4EtykVnAbMz80CgATgsIqYABwF7A+8Ezq1xrSRJkiSpH/pyOuiDwNs6Pd8TuKl8vAA4GDgAuCEzOzLzEaA5IlpqWCtJkiRJ6odeTwfNzCsiYnKnRQ2Z2VE+XgGMB8YBSzrVrF9eq9rFPY25qamBCRPG9PbSNEzZ+/pm/+qb/atv9q++2b/6Zv/qW731r0/XBHbR3unxWGApsLx83HV5rWp71NbWwdKlq3srG3QtLWN7L9Imq1Xv7d/gsH/1zf7Vt1r0z94NHvtX3+xffau37NGfu4PeFf02DpAAAAgPSURBVBFTy8eHArcAtwKHRERjREwEGjPzyRrWSpIkSZL6oT8zgScCF0TESOA+4PLMbIuIW4DbKILljBrXSpIkSZL6oU8hMDMXAfuUj++nuGNn15q5wNwuy2pSK0mSJEnqHz8sXpIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUKa+7thRNwFLCuf/hH4OnA20ArckJmnR0Qj8DXg5cBa4P2Z+UBE7LMptf0dsyRJkiRVXb9CYERsAZCZUzst+w3wduAh4LqImAJMBrbIzH3LMPcl4DDg/E2pzcxf92fckiRJklR1/Z0JfDkwJiJuKPcxFxiVmQ8CRMT1wOuAHYAfAWTmLyJir4gYNwC1PYbApqYGJkwY08+Xpnpn7+ub/atv9q++2b/6Zv/qW0369/RTLJo3beD3q2d7+qm6+/nrbwhcDXwRuBDYFVgALO20fgWwMzCOZ04ZBWgrly3fxNoetbV1sHTp6j6+lMHT0jJ2qIdQCbXqvf0bHPavvtm/+laL/tm7wWP/6lvN+jd3/IDvV13MXcbSxSuGehT/oKef3/6GwPuBBzKzA7g/IpYB23RaP5YiFI4pH6/XSBHqxm5irSRJkiSpH/obAo8B9gA+FBHPowhwqyLihRTX7h0CnA68AHgz8P3yOr/fZebyiFi3ibX1ySn52nv6qaEegSRJkrRZ628IvAiYHxE/AzooQmE78G2gieIunr+MiF8Br4+InwMNwPvK7T+wKbX9HPPQG7GFU/K1NncZ8PRQj0KSJEnabPUrBGbmOuBd3azap0tdO0WI67r9LzalVpIkSZLUP35YvCRJkiRViCFQkiRJkirEEChJkiRJFWIIlCRJkqQKMQRKkiRJUoUYAiVJkiSpQgyBkiRJklQhhkBJkiRJqhBDoCRJkiRViCFQkiRJkirEEChJkiRJFWIIlCRJkqQKMQRKkiRJUoUYAiVJkiSpQgyBkiRJklQhhkBJkiRJqhBDoCRJkiRViCFQkiRJkiqkeagHINWNp59i0bxpQz2K4e3pp4Z6BJKkznzvGxy+/2mQGQKlvhqxBcwdP9SjGN7mLgOeHupRSJLW871vcPj+p0FmCJQkSbXjTNLgcCZJ0kYwBEqqBn8RrT1/CVV3nEkaHM4kSdoIhkBJ1eAvorVXy19CDfG1Z4iXpMowBEqSNn+G+NpzJkmSKsOPiJAkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIYZASZIkSaoQQ6AkSZIkVYghUJIkSZIqxBAoSZIkSRViCJQkSZKkCjEESpIkSVKFGAIlSZIkqUIMgZIkSZJUIc1DPYC+iIhG4GvAy4G1wPsz84GhHZUkSZIk1Z96mQk8HNgiM/cFZgFfGuLxSJIkSVJdqpcQeADwI4DM/AWw19AOR5IkSZLqU0NHR8dQj6FXEXEhcEVmLiifPwLsnJmtG9hkMfDwYI1PkiRJkjYzk4CW7lbUxTWBwHJgbKfnjT0EQNjAi5UkSZKkqquX00FvBd4IEBH7AL8b2uFIkiRJUn2ql5nAq4DXR8TPgQbgfUM8HkmSJEmqS3VxTaAkSZIkaWDUy+mgkiRJkqQBYAiUJEmSpAoxBEqSJElShdTLjWE0iCJiKvB94F6KG/GMAP4zM78/lONS30XELOBgoB3oAE7NzDuHdlTqi4j4ErAnsD0wBngIWJyZ/zKkA1OfRMSewOcoetcI/AQ4PTPXDenA1Cf2r7753lff7N/gciZQG/LjzJyamQcBbwBOiYhXDPWg1LuIeAnwFuD1mfkG4BTg4qEdlfoqM0/MzKnAPOA75c+hAbAORMQLgMuA4zPzAGB/YC3w5SEdmPrE/tU33/vqm/0bfIZA9SozVwJfB44Y6rGoT/4KTASOiYjnZ+ZvgFcP8ZikKjgKuDAz7wfIzA7gM8AbI2L0kI5MfWH/6pvvffXN/g0yQ6D66glgu6EehHqXmU9S/DVtf+C2iPgD8KahHZVUCZMoTt/9uzJIPEFxeq82b/avjvneV9/s3+AzBKqvJgGPDvUg1LuI2AVYnpnHZOZE4N3AeRGxzRAPTRruHgZ27rwgIhop/rr91yEZkTaG/atjvvfVN/s3+AyB6lVEjAWOA34w1GNRn7yM4h/OLcrn9wPLgLahG5JUCZcC74+IXSNiQkTcAFwI/DAzVw3x2NQ7+1fffO+rb/ZvkDV0dHQM9Ri0melyd9A2irvInp2ZVw7luNR3EfFJ4B3ASoo/9pyZmVcP7ai0MSLiaODFmTlrqMeivivvLvlZYCuKO0w+TnE64ccy8/+Gcmzqnf2rb7731Tf7N7gMgZIk1VBEvAx4qLzJluqM/ZM0HBkCJUmSJKlCvCZQkiRJkirEEChJkiRJFWIIlCRJkqQKMQRKkiRJUoUYAiVJkiSpQgyBkiRJklQh/x9PnDwZeiyGwAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,5))\n",
    "plt.bar(range(len(data_set_final.groupby('Dia da Semana').sum()['Subscribers'].reindex(['Domingo','Segunda','Terca','Quarta','Quinta','Sexta','Sábado']))),data_set_final.groupby('Dia da Semana').sum()['Subscribers'].reindex(['Domingo','Segunda','Terca','Quarta','Quinta','Sexta','Sábado']), label = 'Subscribers')\n",
    "plt.bar(range(len(data_set_final.groupby('Dia da Semana').sum()['Customers'].reindex(['Domingo','Segunda','Terca','Quarta','Quinta','Sexta','Sábado']))),data_set_final.groupby('Dia da Semana').sum()['Customers'].reindex(['Domingo','Segunda','Terca','Quarta','Quinta','Sexta','Sábado']), label = 'Customers')\n",
    "plt.xticks(range(len(data_set_final.groupby('Dia da Semana').sum()['Customers'])),['D','S','T','Q','Q','S','S'])\n",
    "plt.title('Bicicletas alugadas ao longo de 2017 \\n')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "O **final de semana é impactado** por um aumento de day-passes. Esse fato pode gerar uma oportunidade para produtos de longo prazo durante o final de semana para otimizar o LTV desse segmento de clientes.\n",
    "<br>\n",
    "Além disso, cabe uma chance de uma régua de relacionamento exclusiva para esse perfil de cliente com o objetivo de up-sell (possivelmente por meio do novo produto potencial citado)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x34abe4048>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "width = 0.2\n",
    "f, (ax1, ax2) = plt.subplots(1,2, figsize=(15,5), sharey = True)\n",
    "ax1.bar(range(len(data_set_final[data_set_final['Feriado'] == 1].groupby('Dia da Semana').mean()['Subscribers'].reindex(['Segunda','Terca','Quinta','Sexta']))),data_set_final[data_set_final['Feriado'] == 1].groupby('Dia da Semana').mean()['Subscribers'].reindex(['Segunda','Terca','Quinta','Sexta']), width = width, label = 'Subscribers Feriado')\n",
    "ax1.bar([0.2,1.2,2.2,3.2],data_set_final[data_set_final['Feriado'] == 0].groupby('Dia da Semana').mean()['Subscribers'].reindex(['Segunda','Terca','Quinta','Sexta']), width = width, label = 'Subscribers Não Feriado')\n",
    "ax1.set_xticks([0.1,1.1,2.1,3.1])\n",
    "ax1.set_xticklabels(['Segunda','Terca','Quinta','Sexta'])\n",
    "ax1.set_title('Bicicletas alugadas ao longo de 2017 por Subscribers no feriado \\n')\n",
    "ax1.set_ylabel('Média/hora')\n",
    "ax1.legend()\n",
    "\n",
    "ax2.bar(range(len(data_set_final[data_set_final['Feriado'] == 1].groupby('Dia da Semana').mean()['Customers'].reindex(['Segunda','Terca','Quinta','Sexta']))),data_set_final[data_set_final['Feriado'] == 1].groupby('Dia da Semana').mean()['Customers'].reindex(['Segunda','Terca','Quinta','Sexta']), width = width, label = 'Customers Feriado')\n",
    "ax2.bar([0.2,1.2,2.2,3.2],data_set_final[data_set_final['Feriado'] == 0].groupby('Dia da Semana').mean()['Customers'].reindex(['Segunda','Terca','Quinta','Sexta']), width = width, label = 'Customers Não Feriado')\n",
    "ax2.set_xticks([0.1,1.1,2.1,3.1])\n",
    "ax2.set_xticklabels(['Segunda','Terca','Quinta','Sexta'])\n",
    "ax2.set_title('Bicicletas alugadas ao longo de 2017 por Customers no feriado \\n')\n",
    "ax2.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "O comparativo de Subscribers aponta que o perfil de cliente parece indicar que os assinantes parecem usar o negócio como meio de transporte para o trabalho, e não em dias de lazer.\n",
    "<br>\n",
    "Isso pode indicar uma **oportunidade de planos para usuários que queiram usar eventualmente**, numa tentativa de up-sell para o day-pass.\n",
    "<br>\n",
    "Vale reforçar que o ano de 2017 contou com poucos feriados, o que pode impactar nessa percepção."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x3a61dae10>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA30AAAFHCAYAAAAV9CVbAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzdfZwO9f7H8dfesHbt2i22cA6W6KvSnZRCqY5fd3J3jnLSqVMJFR06SRJZJUlKhUg4pCippBsnnVPpVqWIom8ilYri2HW3du3u9fvjO7suu9feYK+9mH0/Hw8P1841M5/vzDUz3+9n5jszUYFAABEREREREfGn6EgXQERERERERMJHSZ+IiIiIiIiPKekTERERERHxMSV9IiIiIiIiPqakT0RERERExMeU9ImIiIiIiPhYbKQLcKiMMWnAOmCVNygG2A3801r7oTGmFTDEWtu9lHncC3xnrX26lHECQKq1dksp45wJ9LLW3nTgS1J+xpiZwFfW2nFhjlMH+N1aGxXOOOVljHkXmGitnR/psgAYY7oD/a215x/ANNHAGKAjkA+sBfpaa383xiQA04DTcSdk7rTWLigy/b3A0dba/t7fjwPnBY3yB+BXa+0pB71g5V+WJOAR4GxvWfKBSdbaaWVMl4bbfhPDUKabgBRr7RhjzAagu7V2WUXHqUzB+6ExpjPQwVr7jzDE+Qq3Pb9bAfMq83gplUN1ZFjjqI4sRVWvI734bYB7gLq4fe9Hr9xfHeT8GgPjrLV/qbhSHjmCt6nyHJcOMkaF7dfGmPNx+2SLQy5YBTjikz5PlrX2tII/jDFXAjOBZl6Dr8TKDMBae08FleMk4I8VNC/xpxuAM4CW1tpsY8xY4GHgWiAd2GmtPcEY0xD42BizzFq70RjzR+BR4FLgXwUzC278e4279715VYYxwE7gFGttwBhTH1hqjPnRWru4ksqwH2vtlEjErSzW2oXAwkiXQ444qiPlSOGbOtIYcx7wDNDNWvu5N+xqYIkxprm19veDmG0jwFRgMY9YFXhcqjL8kvQVVRv4FfbPso0xicAEoC2QCywA7sYdIL6y1o4zxrQGHgdqAjnAIGvt28EzN8b0Am7BnWnaCvQHdgH3AsnGmH8BvYDxuKsgSUAUcKN3ZrUd7gpJDBAAHrDWvlgkRnRJ0xcZb7+zq8F/G2OGeOXYAbwHdLXWphljjgcmefOtB6wAelhr9xhj/gzcjzsT/FlQnJrAZKCZt353AD2ttdabZhjurFwecIe19r0i5Sxt+j9636V5yznLWvsQpTDGdAVGeL/BDtxZ60+NMenefOrhDo4/A3+z1v7qnWWeDFTHnflu5E33rjGmD/APr/ybcWeSvg0R917gatzvvjZoeHXgQaA97nddDvzDWru9yCy+9tZPtvf3MqCf97kb0BPAWvujMeYt4ErcttILeBdYDRxdwmp5CnjEWrsiRLnTgaZAA/b95jdaa7cbY04CJuJ+lwDwsLX2aW/feQy3bScCZwaVG28+m4FqQI619hdvW/ifF3MDQVfaCv4GtgDRxphpuMp9r7eulhpjmgPTgRq4bWGatfYJY0wsMBa4HLfvfoTbB4cC5wD1gS+B74A6BWd5gX7GmFOBOG+5Znhl6YTbZqvjtvVB1tqPvfUUPL9RocoTYv22wf3+NXHb0Ehr7WvGmOuAv+C200bARu936g8c7/1eD4eYX0n74XXeOr3cGHO2t07ivN/iLWttL29dFRzn9gLrgeuttTuLxDgRmAEkAN94ZS91eUKUs7Tj5UivjLWBh6y1k4LLH7w8uH3qJ+B4a+0m77tPcI28dZRwvCpaHik31ZGqI1VH7l/udCq+jhwJ3FeQ8HnlftYYsweIKXoVqMi+WKwuBJ70/v+DMeZNa+3FZfzOx+GubNYDPgfeAf4ONAYGW2vnenHvZl89tQG4xavP38XV581x28XPlLEde/Mrtv9ba7/xrsDvBk4GjsWdwNwKdMJdCb2x6LHEm19J29RM9h2XbgD64rbdo4Ex1trJxpi6wNNAHW+y1621w0PECLlfl7Y8IeZxA3C7t2624NY1QKIx5jlvPdYAeltr3zdFeiQU/A2sxG1jJ3vDU4DvgSa4Y/NQbzmPwR0Lii1PSfxyT1+8MWaF9+8H3E74QIjx7sWt8BOA03Arr33Bl8aYarhK7l5vJ+wNPOZVLgXjtMf9kOdaa0/HNbpettb+hLuE/7619nqgNa7heI619kRgFjDEm81I3IHnDNxZrQtDlLW06ctkjLkYuA44E9ewTgr6ujduQzkbd5BrDHQ0xhyLawT+xSvbD0HTXApkWGvPsdYej9spChrWD+EOEq2A4cD5IYpU2vTPAu94G3hb4G/GmL+WsmzNgSleOU/FrfdXjDG1vFHOBa6w1jbHHYxv8hrCLwHDrevW8ThuG8AYcyEwGLjAm98cYIExJqpI3C64A+NpQBsgOejrIbhG0hnePH7BXQnbj7X2Y2vtF978jvLK/oL3dQNcw7fARryz4tbakdbaibiDbah1cinQ0FuukrTHVZDNvbLe462XhcAEb71cCow2xpzjTdMCuMpae0qRygxcg/xPwBZjzL+NMcOB7dba9aWUoUA8Lkk5HVeJvOA1Cu4AXvW2v8uA87z97xbcdnyqV6YkoIc3r0bA6dbav4WIk2WtbQn8H/CAMeYkY0wzYDRwmRe/D/CS1+gqOr+SylPI+x3/BVzjxeoCTDbuTDS47fEm4BTcb/xXb71dBowKMb/S9sNgA4B7rLWtgROBzsaYM3BJ6/nAqd70673YRT0LPOX97o95y12e5SkoZ1nHy/Ve/G7Aw974IVlrM4GXgb958z4B1wh4kxKOVyXNS0JSHVmE6kjVkSFUdB3ZCviwyDCstS9a7+RWKYrVPbiE80ZgnZfwlfU7t8Mdf1t68zjRWnsebrsa6a2Xa3FJ2FnW9QZ4A5dYFthmrT3RWjuBcmzHJe3/QaO0xO3P5+ESpJ3W2ja4Y1Kx/beMbapgnETcPltQp/fw4uINX+/VZecCzYwxyUWmL3G/LsfyFIx3Ku6kxiXedrIQd8IM3DY63lu/T+LaTqV5C5cotvL+vgp4HcjArbO/e7/B2cBdxnVHLRe/JH1Z1trTvH+NcBv3C8b1fQ7WAZhurc2z1uZYa9vb/e9fORnIs9a+DmCt/dxae7K1Nvgg0hFXCXxkjFmB2wCOMsbsd2bJWvsxrjHb1xgzDnc2u+AepnnAJGPMs7jKZmjRBSpj+vK4DHjBWpthrQ3gzloWuBP43RgzGHf2pr4373bAKmvtam+8J4PKMx+YaYy51RjzGG5nLyjPc8DLxl25OYp9OxtlTe81tNsWlM9r/M3EHVhLciHw34LkwrozQ7/h1iXAu3bf2cPluLM+J3vjLvL+fwd3RgXgEuB563W1sNbOxJ0dSysStwPwkrV2h7U2F3eQKHA5rnG83NsuuuIa4iEZY47DnVn+gH2/TTTuoF4gCnfGqDxuw50NL238F6y1m73teTpwMe5qUw1r7UsA1tpfgBdx6wTgJ2ttyKTDWrsS183kAmAx7oC80riraGXJsNY+782noCtoc9zBdLAx5iXgz7gzwfm4dT/bWptlrc231vaw1s72plvq/R6hPBm0XItxydb/4c58/tf7rZ7FNRSahphfSeUJdo43vwXe/N7A/Y4FidZn1tqfvOm+BxZ7n9fhGtgJReZX4n5YxN+BFGPMUOAJXCKdiLt3Kw/4xBhzH/Citfaj4AmNMbW98j3trZ8P2bc/lLU8Bco6Xs7x/l+BuxpZi9JNY9+Z0euBGd68SjpeSfmpjixOdaSjOnKfCq0jcfXKwbazy1P3lPU7/8dam2mtzcIl2f/2hq9j39XQy3HJwzLvd7mV/buPvh/0ucztmLL3/1ettXu9pHdXCWUKVto2hbfcO73l6OjVeXezb9/7N/AXY8wbuCuBQ7x9KFhpdW65jme4tsWb1p3cwlr7qN137/I6a+0n3ucVuCt0JfKORzNwJ6XA1YdPecM7AWcYY0bgrnBHEdRLpyx+Sfr2Y639D66b11lFvsol6IBhjGngNX5Cfu+N08I701MgBtf4PM3L2lvizuZsKzJdR1xmDvAK7mxMlFe+J3EH2LdwB5WVxpga5Z0+hChvmupFliV4/OAD3Vzc1Y0fcN1jvggaN3iawoa0MeZm3EFwN64xNzdoee7G7TTLcBtpqMv9JU0fHWK5onFdBktS0OWnpGmygoYHvPkXXR+wb52Eml9UCWUIuX68eQwI2i7OooT7ZIwxFwAf484k3+TtyOBu8K4fNGp93JnMUhljUnFnvV8oY9Tg8kbjlr+sdbmTEIwxscaYJ4GjvIbfI9baS3HdIft6oxWs+wLB22fRijca2GtdF8JmuEbf6cAq47o2Fd13jzXG1CutjCHiROO6O8bgKsrTgn6vs9nXwCmcXynlCRYDrAkxvze974ue/d1bSnkLlLSdBXsP13D9BneF5mcgylqbgbsiOgi3/M8bY245gDhlLU/w+KUdL/dCYQVWEKvEbcJa+z4Qa4w5C9eFq6ByL+14JQdBdWThsqiOVB0ZrMLqSM9S3LGzaHkmGWM6UPrxsLx1T2llK0/dEwM8GPS7tMKdZCgQXB+WuR1T9v5f4fWht15W4HqrfIA7GVRQ5s9wV+qn4k5SfGpcj5jyxijX8Yzix85470os7L+Mwb95aW2kGcAVxpjTcA+nW+KdAFruleEL3NXgvRxAfejLpM+4/vhpuJUT7D/A340x0caYOGA+QV1XAAsEjDH/582nJfA2+6+nN4GrghqcNwH/9T7nsm9n+z/cGY3JuB2kK27jwRjzEa772ExcxZKC68oUrMTpi/gdtwGC19fd8zru7EbBZexe7NsgL8Z1z3ne+7u1N+/3gJO8y9Sw7yxDwTQzrbXTceupE65Peqxx92olWPcQjVuAU7z1S1nTW2t34A6M/bx1k4y7yfqtEMta4L/AxcaYJt40F+K6fXxSyjRrgGxjzCXeNGfhGhUB3Jmgv3oVA8aY63H9tr8rMo9FuJ0wxbjuTNcEffcm0N8YU9377ilCdJ/ytqmXgWtt8SfLvYLbHgoOYpcAxe6jCqEt7mrSrjLG62KMSfbK1xt4FZcw7DWuPzvGPYzlL5S+/vHOuBlguPG67XkNvxNwByMI2jaNu1ehXtAsahtjCu7r6oRrhKw1xszB3TvzHG5b2o67L+E/QE9jTJxX/sm4Lg9luc6L0RB3xvC/3r+LCg7IxpjLcH3o44tOXEp5gi3FdRk5z5vmNNx9B38oR/lCKW0/LChXCq5b2p3eGeg/4s5Gxnjr9b/AR9badNzVvDODp7fWbsXd43GjN7+WeGf6D2B5ynO8LOp3oIUxpoa33RRt9E3D3VO2suCMKSUfr+QgqY4EVEcWpTqyAutIzyhgRHCSYfbdx7wKt202NMYcY1xX2b8GjVdS3RO8Dx3M71zUm8CNZl+X0HuB2UVHOoDtuLT9/2CUtk0VaIVbl6NwPXoK2hYxxpgxuC7LC3C3RHyN65IbrLT9urzL8w7QIWi8voS+EhosuI1Un6BjrbX2Z+BT9t3HCe4kQC1gmLX2VVxvgDgOoD70S9IXfL/CClxF1ccWv8l4JO7G8y9xld0bBZfsAazrj/1n3E66Anfm8M/W2pygcRbj+u2+ZYxZiatE/uydiVoKNDHucvwU4HxjzCpcI3gd0NjbaAcD9xpjluNuPB5prd1QpKylTR/sH7huMF/gGty/euV8G3dQ/dgYswzXD3q3N81Q3CX6VbgNagnQ1Ou60RN41ptfcNefcbhuNCtxl/u/8KbJBQYCc7xpXgBusMX7toec3vvuauBPXnk+xd1XMJMSeJfgb8Hdh/UV7r6ATiEu2QdPk4s7UKd76/12YBOw21r7Fu5s7tvGmK9xXcwuL9qVwlr7Bu7syzLcQTU43n24G6CX424kj/JiFPWA992YoG22oH/4CFx3nq9xja87rLXrSlqmIM282GXZjOuqt8Yr+2hr7V5cY2mA99v8B9fYeacc8+uO266+9cq8Cndm/F7v+zu9+a7AHag/D5r2N1yDawVwF64vfS5uPV5tjPkSt45fxh2Qn/Sm/9yL8yul35tRoIa3Xb4B3Gqt/dbbfvoAz3lx7gM62yIPOvGUVJ5C3n7zF+Ahb7zZuPvhNpSjfMWUsR8WjJOB25a+8PaBIbh7R5riKsmvga+8fb8N3v0bRVyFa8itwt2fseZAlqc8x8sQFuOON9/g1mPR12nMwt27EXxPScjjVSkxpDjVkaojVUeWrULrSK/3wo24+15XGGNW49bxBdZ1I12N276W4faN74MmL6nuWQ3sMcZ86pXzgH7nEKbhEuel3no9hRAnGsu7HZex/x+wMrapAotxV3wtbp00xCVUTXFPdD3NWz/LcOv4uSIxStyvy7s81tpVuCtv//Z+s0twCWJpJgD1jDEWdx990YfYPIW7yjvL+3sl7rf6xhizBndiaDUHUB9GBQIH9TvIYc64G0DbWGsf9/7+J9DaWtuj9Cn9yxjzEO79NpuNMQ1wDZsmXgPa14x7klfwUy1FRKos1ZHFqY5UHSn+5tdXNgh8C9xp3GOWA7i+8H0iW6SI+wH38I6CPtA3VoXKTEREilEdWZzqSBEf05U+ERERERERH/PLPX0iIiIiIiISgpI+ERERERERH1PSJyIiIiIi4mNK+kRERERERHxMSZ+IiIiIiIiPKekTERERERHxMSV9IiIiIiIiPqakT0RERERExMeU9ImIiIiIiPiYkj4REREREREfU9InIiIiIiLiY0r6REREREREfExJn4iIiIiIiI8p6RMREREREfGx2EgXoCLk5+cH8vICYZt/TEwU4Zy/4kY+dlWLG8nYVS1uJGP7NW61ajFbgNSwBfCZcNaR2q/8HzeSsata3EjGrmpxIxk7nHFLqx99kfTl5QXIyNgdtvmnpCSEdf6KG/nYVS1uJGNXtbiRjO3XuKmpST+EbeY+FM46UvuV/+NGMnZVixvJ2FUtbiRjhzNuafWjuneKiIiIiIj4mJI+ERERERERH1PSJyIiIiIi4mO+uKcvlLy8XLZt+53c3JxDntfmzVEEApV/o2dVixvJ2L/9Fk10dCxHHZVKTIxvdwsRERE5AlRkO7Y81OY8suLGxlY/4Darb1u327b9To0aCdSsWZeoqKhDmldMTDR5efkVVDLFPRxjR0dHsX17Btu2/U6dOvUqPb6IiIhIgYpsx5aH2pxHTtxAIMCuXdsPuM3q2+6dubk51KxZq1J2FDnyRUVFUbNmrUo7oyYiIiJSErVjpSQH22b1bdIHaEeRA6LtRURERA4XapdISQ5m2/Bt986iEmvFEx9XcYublZ3Lzu1ZFTY/EREREZFQ1I6VQ1Vlkr74uFjShrxeYfPbMKYjO8sYZ/bsmSxb9inR0VFERUXRp08/mjc/IeS4v/76CyNGDGXq1JmHXLatW7fwr39NY9CgIXTv3olnn51PXFzcIc+3qPfee5cXXphLIBAgOzubnj2v4YILOjB9+pPUrl2brl27V3hMERERkaomEu3Y9evXMXny4+zZs4esrCzOOactN9zQ54CuMm3fnsnSpR9z0UWXHFqBD1F+fj7PPDOTpUs/Ijo6mqioKP75z8E0bnwc/fv34Y47htKoUVpEyxhuVSbpq2zff7+eDz98j8mTpxMVFcXatZZRo9KZNWtu2GPXrl2HQYOGhDXGqlVfMm/eHMaOfZSEhAQyMzPo2/d60tKahDWuiIiIiITXjh07SE8fyv33P0SDBg3Jy8tj+PAhvPLKiwd0Uv+779by4YdLIp70Pfvs02RmZjBx4lSio6NZs+Zr7rzzn8yZ82JEy1WZlPSFyVFHHc3mzZt4/fVXaN26Dc2aGZ56ahbAfmcUFiyYz9atW7nssk5kZGzjzjtvY9u2bbRp045evfqwZMnbPPPMLGJjY6lXrz7Dho0kMzOD++9PZ+fOnQQCAYYNG8nixYv46quVZGVlMWTIcEaPHll41fChh0azadOvHHXU0Qwblk5MTCwPPTSajRt/Ij8/n969b6Zly1Zcc82VNGjQiLi46nTrdgUTJz5KbGwsSUlJjBgxioSEmoXL9+qrC7jiiqtISEgAIDk5halTZ5GUlATA+++/xzvv/JfMzExuvPEm2rU7j86dL2bhwjcBGDHiLrp0+Qvz5z/PFVf8ldNPP4M1a77m6adnMGzYSMaMGcXOnTvIzMygU6dudOumq4YiIiIileGDD5bQsuWZNGjQEICYmBiGDRtJtWrV+OKLZbzyyouMHPkAQGH7LlSb9emnZ/Ddd2t55ZWXOOussxkz5j5yc3OJiopiwIBBNG/enB49utKixSls3PgTLVu2YteunaxZ8zUNGzZi+PD72Lx5E2PHjiYnJ5vq1eMYPHgo+fn53HnnbdSqlcw557QlPj6BRYteIzo6mlNOOY1+/QbstzwLF77M9OmziY52jzM54YSTmDFjNrGxLhWaMWMq27b9j6ysLNLT72fz5k3FlvGll17n6qu7M3PmXOLj45kz52liYmI488zWTJgwnvz8ADt37mDgwEGcfPKplfVTlZuSvjBJSUlhzJhHePHF55kx4ylq1KhBnz63cP75fypxmqysLIYPv4/4+Hj69evNeeedz1tvvUmPHj3p0OFiFi16jV27djFr1gzatTuPrl278/nnn7FmzdcANGrUmIEDB/Hrr7/sN9+uXbvTosXJPPHEYyxcuIDY2FiSk1O46657yMzMoF+/PjzzzDyysrK47rpenHDCiTz++Hjat7+Aq666hg8+eI/t23fsl/Rt2fI79ev/Yb84tWrVKvycmprKkCHD+eKLZcyZ8zTt2p0Xcpk7derKokWvcfrpZ/DGG6/RuXM3Nm7cSIcOF9G+/YVs2fI7/fv3UdInhyyWvaSmJhUbnp+TxdbM3AiUSERE5PAUqp1XcKK/JKHarNdeewOvvPIiXbr8mWHDBtO9ew/OPfd81q61jBlzHzNnPsumTb/y2GNTqFOnDpdeeiFTp87kttsGc+WVXdixYweTJj1G9+49OOectixb9ilTpkykT59b+N//tjJ9+jNUq1aNG2+8loED76BFi5N5+eX55ObmFiZ0ANnZe/Zrp4K7YFHw6oQ2bdpx8cWXMX36k7z77n854YSTii1fbGws7dtfyLvv/pdLL72c//xnMePHT2TZsk/p3/82jjuuKYsX/5s33nhVSV9VsnHjT9SsWZOhQ0cA8M03qxk0aAAtW7bab7zgdzM2bdqMxMREwJ2B+PHHH7j11tuYPXsmCxa8SKNGaZx33vn8+OMPdOzYGYAzzjgTgOnTn6Rhw0bFyhEbW40WLU4GoEWLU/nss08IBAKsXLmc1au/AtwLQDMzMwBo2DANgGuuuZ6nn57BgAE3k5p6DCee2GK/+R57bD1++20zzZodXzhs5coVHH10bQCMcfcu1q5dhz179hQrV8Fyt259Dk888Rjbt2eycuVybr99MFu2bGHevDksWfIOCQk1yc1Vg1wOXVS1GpCeXGx4dHomsKPyCyQiInKYOvbYenz77Tf7Dfvll5/57bfNxcYteNF4qDZrsA0bNnDqqS0BaNbMFM6rVq1k6tatC0B8fDyNG7tbhWrWTCQnJ5v1679j9ux/8eyzrsdcQTJXr159qlWrBsDQofcwd+4zTJkygZNOOrlYGZOSkti1ayc1ayYWDnv33bcL2+X72q212bp1a4nL2KlTV8aNG0OjRmk0aNCQ5OQU6tQ5hpkzpxEXF8fu3bupWbNmsekPB75+ZUMkrVu3lnHjHiA7OxuABg0akpiYSHR0DNWrx7F16xaA/XaoH37YwO7du8nNzWX16q9o0uQ4Fi58mV69+jBx4lQCgQDvvfcuaWlpfPPNagBWrPiCJ554HHAvGC8qN3cva9daAL78cjlNmhxHo0ZpdOhwMRMnTuXhhx/nggs6kJTkzn4U3Jz71luLuOyyy5kw4UkaN27CwoUv7Tffjh07MXfubLKy3JOftm37H6NH31uY4IW6xzc3N5fdu3ezd+9evv9+nVfmaC64oAPjxo3h3HPPJyYmhrlzZ9OixSncc899XHhhh8IdTeRIVXCVsei/2sk67yYiIoeftm3b8cknH/HzzxsB14abMGE869ev89qxLjHatOlXtm/PBAjZZo2OjiY/37Xj0tLSWLlyOQBr19rCCwVlPRimYcM0br75ViZOnModdwwt7DUXFbUvjVm4cAGDBt3FxIlTWbvWsmrVl/vN45JLLmfGjKcK25SrVn3J448/QvXqcSHLUNIyuu6uAebMmU3nzt0AeOyxh+jVqy/Dho3kuOOaHrbt1irT4sjKzmXDmI4VOr/StG9/IRs2fE+fPteRkBBPfn6AW24ZQGJiIldc0YNHHnmQY445ljp1UgunSUqqxYgRd5GRsY0LL7yIxo2bcMIJJzFwYD+Sk5NJSEigTZt2nH12Wx544F7efPMNoqKiGDJkOP/+d+gnOlWrVo35859n48afqFu3LjfffCv5+fk8+OAo+vfvw65dO+nW7YrCPs4Fmjc/iVGj0klISCA2NpbBg+/e7/sWLU6hc+du3HZbP2JjY8nO3sNNN/WjadNmLFnydsiyXHnlVfTtex316/+BunXrFQ7v2LEzV17ZheeeexmAtm3PY9y4B1i8eBHJycnExMSQk5ND9erVS13nIocrXWUUEZFDUdnt2Jo1E7n77pE8+OAo8vPz2b17N23bnku3bt3Jy8sjMTGR3r3/TlpaY+rVc91AQ7VZc3JyWL/+O+bNm0O/fgN58MFRzJ37DLm5udx11/BylbVfvwE8/PAYcnJyyM7ew4ABg4qNc9xxTend+1pSUo4iNTW1WA+1nj2vYdq0KfTtez2xsbHExsYyduz4wiuFRTVvfkLIZQTo2LEL06ZNLrxKeNFFlzJkyO0cffTRpKYeU9h77nATdbhmowdi7968QEbG7v2Gbdr0A3XrFu/ueDBiYqIL+/xWpqoWN5KxC+JW5HZTHikpCRTddv0eO1JxU1OTQiZepGfy++/hTbwiFduvv3FqatLnQKsyRxQgdB1ZUXQM83/cSMauanGDY1d2eyTS7a9IONKXOdQ2Ulr9qO6dIiIiIiIiPqakT2SpEPIAACAASURBVERERERExMeU9ImIiIiIiPiYkj4REREREREfU9InIiIiIiLiY1XmlQ21k2OJrh5fYfPLz8lia6ZeGi4iIiIi4aV2rByqKpP0RVePD/3I9IOdXznerzV79kyWLfuU6OgooqKi6NOnH82bnxBy3F9//YURI4YyderMQy7b1q1b+Ne/pjFo0BC6d+/Es8/OJy4u7pDnG2z69CdZuvRDJk+eQWys24z69LmOkSNHU69efZ56ajJr1qwmISGeXr1uonHjJuWa7/r165g48VH27NlDVlYW55zTlhtu6MPy5Z/zyisvMnLkAxW6HCIiIiKHu0i0Y9evX8fkyY8Xa5OV9TL1YNu3Z7J06cdcdNElh1jiQ9O/fx+Mac6tt/4TgOzsbK6+ujvz579KTk4O9947nJycbBITk7jrrntKfH9fUe+99y4vvDCXQCBAdnY2PXtewwUXdGD69CepXbs2Xbt2D+diHZAqk/RVtu+/X8+HH77H5MnTiYqKYu1ay6hR6cyaNTfssWvXrsOgQUPCHufXX3/lmWdmct11Nxb7rnfvmw94fjt27GD48Lu4//6xNGjQkLy8PIYPH8Irr7xIw4ZpFVBiERERESnLjh07SE8fyv33P1SsTXYgicx3363lww+XRDzpA3jrrTdp1649p59+xn7Dq1evzqhRDx7w/Fat+pJ58+YwduyjJCQkkJmZQd++15OWVr4LHZVNSV+YHHXU0WzevInXX3+F1q3b0KyZ4amnZgHubMMddwylUaM0FiyYz9atW7nssk5kZGzjzjtvY9u2bbRp045evfqwZMnbPPPMLGJjY6lXrz7Dho0kMzOD++9PZ+fOnQQCAYYNG8nixYv46quVZGVlMWTIcEaPHll41fChh0azadOvHHXU0Qwblk5MTCwPPTSajRt/Ij8/n969b6Zly1Zcc82VNGjQiLi46nTrdgUTJz5KbGwsSUlJjBgxioSEmvstY8+e1/Laawto06Ydxx/fvHD4rl07GTNmFDt37iAzM4NOnbrRrVt3vv32G8aPf4iYmBiqV6/O4MHDqFu3buF0H3ywhFatzqRBg4YAxMTEMGzYSKpVq8aqVV/y008/cfvt/2Dbtv/Rtu259OrVN+S6rFUrmR07tnPDDX3IycnhuuuuYtas55g+/Um++WY1u3fvJi2tMUOHjgjzViAiIiJy5PnggyW0bBm6TfbFF8v2633VufPFLFz4Zsg269NPz+C779byyisvcdZZZzNmzH3k5uYSFRXFgAGDaN68OT16dKVFi1PYuPEnWrZsxa5dO1mz5msaNmzE8OH3sXnzJsaOHU1OTjbVq8cxePBQ8vPzufPO26hVK5lzzmlLfHwCixa9RnR0NKecchr9+g0otkwDBtzO2LH3M336M8TExBQOX7/+OyZMGE9+foCdO3cwcOAgTj75VBYvXsS8eXOpVq0aDRo0ZPDguwt7twG8+uoCrrjiKhISEgBITk5h6tRZJCUlAfD+++/xzjv/JTMzkxtvvIl27c6jc+eLef31twAYMeIuunT5C/PnP88VV/yV008/gzVrvmbWrOkMH35vyLb0odCDXMIkJSWFMWMeYeXKL+nb93p69vwLH330fqnTZGVlMXz4fUyePJ2lSz9i7dpveeutN+nRoyeTJ0/nzDNbs2vXLmbNmkG7ducxZcoM+vS5hTVrvgagUaPGTJkyo1hXzq5duzNx4lTq1avHwoULePXVBSQnpzBp0lOMGfMwjzwytjD+ddf14t57H+D995fQvv0FTJw4lY4du7B9e/EuAAkJ8dx55zDuv38kOTk5hcM3btxIhw4XMX78JMaOfZTnn38WgAcfvJ9//nMwEydOpVu37kyc+Mh+89uy5Xfq1/9DkRgJhZfYc3JyeOCBcTzxxDReemleievx4osv4+23/0MgEOCDD96jTZtzycnJJikpiUcffYIpU2bw9der+P3330r9PURERESqorLaZKGEarNee+0NnHFGK7p0+TOTJj1K9+49mDTpKQYMuJ0xY+4DYNOmX+nd+xYmTXqK+fOfp1u3K5g6dRYrV37Jjh07mDTpMbp378GECU9y1VV/Y8qUiQD8739bGT9+Eldf/XfeeONVBgwYxJNP/ov69f9Abm7x+xWbNj2eSy7pyIQJ4/cb/v336+nf/zYee+wJevS4mjfeeJXMzAymT3+Sxx+fzOTJ00lMTOSVV14scx3VqlWrsPtramoqjz02mX/8458sWDC/xPXWqVNXFi16DYA33niNTp26ldiWPhS60hcmGzf+RM2aNQuvJn3zzWoGDRpAy5at9hsvENj3uWnTZiQmJgJwwgkn8eOPP3Drrbcxe/ZMFix4kUaN0jjvvPP58ccf6NixMwBnnHEm4O6xa9iwUbFyxMZWo0WLkwFo0eJUPvvsEwKBACtXLmf16q8AyMvLJTMzA6CwG+U111zP00/PYMCAm0lNPYYTT2wRcjlPPfV0WrU6i2nTphQOq127NvPmzWHJkndISKhZuONt2fI7zZoZb7qWhTttgWOPrcfatXa/Yb/88jO//bYZgCZNjqN69eoAxMQU33QL1mWtWrU4/njDypUrWLToVfr3v424uBps27aNESOGkpCQQFZWVsgDgoiIiEhVd+yx9fj222/2GxbcJgsW8BpgodqswTZs2MCpp7YEoFkzUzivWrWSC3t+xcfHFz4HombNRHJyslm//jtmz/4Xzz7reswVXG2rV69+YRI6dOg9zJ37DFOmTOCkk04ucbn+9rfruPnmXixd+lHhsDp1jmHmzGnExcWxe/duatasyS+//Ezjxk0Ke7mdempLPvtsabF19Ntvm2nW7PjCYStXruDoo2sDYIx7jkft2nXYs2dPiPXm/m/d+hyeeOIxtm/PZOXK5QwcOIht2/4Xsi19KHSlL0zWrVvLuHEPkJ2dDUCDBg1JTEwkOjqG6tXj2Lp1C8B+O9QPP2xg9+7d5Obmsnr1VzRpchwLF75Mr159mDhxKoFAgPfee5e0tDS++WY1ACtWfMETTzwOQHR08Rtrc3P3FiZSX365nCZNjqNRozQ6dLiYiROn8vDDj3PBBR1ISqoFUHh24q23FnHZZZczYcKTNG7chIULXypxWfv0uYWlSz/k559/AmDu3Nm0aHEK99xzHxde2KHwYFCnTirffbe2sNwFXQYKtG3bjk8++Yiff97olT2XCRPGs379Oq9sxWOXtC47derKvHlzyM7OplGjNJYu/ZDfftvMyJGj6dOnH9nZewrLJSIiIiL7lNYmc22vrYC7Srd9eyZAyDZrdHQ0+fmuvZWWlsbKlcsBWLvWFiZHZT0YpmHDNG6++VYmTpzKHXcM5fzz/+RNty+NWbhwAYMG3cXEiVNZu9ayatWXIefluqmmM2HCvt5mjz32EL169WXYsJEcd1xTAoEA9er9gQ0bvicrKwsI3W7t2LETc+fOLhxn27b/MXr0vYUJXqjFys3NZffu3ezdu5fvv3ft2+joaC64oAPjxo3h3HPPJyYmpsS29KGoMlf68nOyvCcVVdz8StO+/YVs2PA9ffpcR0JCPPn5AW65ZQCJiYlccUUPHnnkQY455ljq1EktnCYpqRYjRtxFRsY2LrzwIho3bsIJJ5zEwIH9SE5OJiEhgTZt2nH22W154IF7efPNN4iKimLIkOH8+9+vhyxHtWrVmD//eTZu/Im6dety8823kp+fz4MPjqJ//z7s2rWTbt2uIDp6//y/efOTGDUqnYSEBGJjYxk8+O4SlzUuLo6hQ0fQt+/1ALRtex7jxj3A4sWLSE5OJiYmhpycHO68827Gjx9LIBAgJiaGIUOG7zefmjUTGT58JA8+OIr8/Hx2795N27bn0q1bd5Yv/zxk7JLW5emnn8HYsfdz7bU3AO7K6cyZ0+nT5zqqV69O/fp/CHlZXkRERORwU9nt2Jo1E7n77tBtsry8PBITE+nd+++kpTWmXj3XlgrVZs3JyWH9+u+YN28O/foN5MEHRzF37jPk5uZy113DSy1DgX79BvDww2PIyckhO3sPAwYMKjbOccc1pXfva0lJOYrU1NQSe6iBSyKvvLIn8+bNAeCiiy5lyJDbOfroo0lNPYbMzAxSUlK44Ya+/OMffYmKiuaPf2zATTf1328+LVqcQufO3bjttn7ExsaSnb2Hm27qR9OmzViy5O2Qsa+88ip69/479erVp27deoXDO3bszJVXduG5514GSm5LF/R4OxhRfrjasXdvXiAjY/d+wzZt+oG6dYt3dzwYMTHR5OXlV8i8FPfwjF0QtyK3m/JISUmg6Lbr99iRipuamhT6cdfpmfz+e+mPrT5SY/v1N05NTfocaFXmiAKEriMrio5h/o8bydhVLW5w7Mpuj0S6/RUJR/oyh9pGSqsfq8yVPhE5PMSy1yVBRehFsSIiIiLhUeFJnzGmGjADSAPigFHAamAmEAC+AvpZa/ONMSOAjkAuMNBa+6kxpmmocSu6nCISGVHVaoS86lWeF8WKiIiIyIELx4Nc/gZstdaeC1wKTAQeAYZ5w6KALsaYlkB7oDXwV2CSN32xcQ+2IH7ouiqVR9uLiIiIHC7ULpGSHMy2EY7unS8AwS+jyAXOAJZ4fy8CLgIssNhaGwB+NMbEGmNSSxj35dICxsREkZKSsN+wzMx4srJ2kJiYXOZTgcojJiYyDzqtanEjFTsQCJCVtYP4+Phi21I4xcREV2q8wyV2SSJVnkiuh3DGjtRvfDhuW1VZqDqy4uZd9Y5hVS1uJGNXtbjBsSu6HVve2JFQ1dqchxo3EAiwc+f2A26zVnjSZ63dCWCMScIlf8OAcV5yB67/VjJQC9gaNGnB8KgQ45YqLy9Q7IbbxMSj2bbtd7Zv33YIS+NERUVF5GxLVYsbydjR0dFER8dy1FGplXrzdp2UalSrVqPY8Mq4vy2iD1QpQZgf/hGRuJGM7deHIJS2PqW4UHVkRTkcHnihuP6NXdXiBseuyHZseajNeWTFjY2tHrLNWlr9GJYHuRhjGuCuzj1hrZ1jjBkb9HUSkAFs9z4XHZ4fYtgBi4mJpU6demWPWA5V7aBzOBzsqkpc3d8mIiIiRVVkO7Y8qlr7K5KxIxW3wq9pGmOOBRYDd1prZ3iDlxtjzvc+Xwq8D3wIXGyMiTbGNASirbVbShhXREREREREDkI4rvQNBY4ChhtjCt66OAB43BhTHVgDzLfW5hlj3gc+xiWf/bxxbweeCh43DGUUERERERGpEsJxT98AXJJXVPsQ46YD6UWGfRtqXBERERERETlwkXtcjoiIiIiIiISdkj4REREREREfU9InIiIiIiLiY0r6REREREREfExJn4iIiIiIiI8p6RMREREREfExJX0iIiIiIiI+pqRPRERERETExyr85ewicmSIZS+pqUnFhufnZLE1MzcCJRIRERGRcFDSJ1JFRVWrAenJxYZHp2cCOyq/QCIiIiISFureKSIiIiIi4mNK+kRERERERHxMSZ+IiIiIiIiPKekTERERERHxMSV9IiIiIiIiPqakT0RERERExMeU9ImIiIiIiPiYkj4REREREREfU9InIiIiIiLiY0r6REREREREfExJn4iIiIiIiI8p6RMREREREfExJX0iIiIiIiI+pqRPRERERETEx5T0iYiIiIiI+JiSPhERERERER9T0iciIiIiIuJjsZEugMjhIJa9pKYmFRuen5PF1szcCJRI5NBpuxYRERFQ0icCQFS1GpCeXGx4dHomsKPyCyRSAbRdi4iICKh7p4iIiIiIiK8p6RMREREREfExJX0iIiIiIiI+pqRPRERERETEx5T0iYiIiIiI+JiSPhERERERER9T0iciIiIiIuJjSvpERERERER8TEmfiIiIiIiIjynpExERERER8TElfSIiIiIiIj6mpE9ERERERMTHlPSJiIiIiIj4mJI+ERERERERH1PSJyIiIiIi4mNK+kRERERERHxMSZ+IiIiIiIiPKekTERERERHxMSV9IiIiIiIiPqakT0RERERExMeU9ImIiIiIiPiYkj4REREREREfiw3XjI0xrYEHrbXnG2NaAq8Ca72vJ1trnzfGjAA6ArnAQGvtp8aYpsBMIAB8BfSz1uaHq5xyeIllL6mpScWG5+dksTUzNwIlEhERERE5soUl6TPGDAauAXZ5g1oCj1hrHw4apyXQHmgNNABeBM4EHgGGWWvfNcZMAboAL4ejnHL4iapWA9KTiw2PTs8EdlR+gUREREREjnDhutK3DvgzMNv7+wzAGGO64K72DQTaAYuttQHgR2NMrDEm1Rt3iTfdIuAiykj6YmKiSElJqPilKJx/dFjnr7jlE6kyVbW4kYxd1eJGMrYfj5kSWjjryEj+1lWtjtS69n/cSMauanEjGTtSccOS9FlrXzTGpAUN+hSYZq393BhzNzACyAC2Bo2zA0gGorxEMHhYqfLyAmRk7K6QsoeSkpIQ1vkr7j6hunYWCGeZqlrcSMauanEjGTtSccN9DCltuaS4cNaRkawvqlodqXXt/7iRjF3V4kYydjjjllY/VtaDXF621n5e8Bk4HdgOBJcsCZcI5ocYJiIiIiIiIgehspK+N40xZ3mf/wR8DnwIXGyMiTbGNASirbVbgOXGmPO9cS8F3q+kMoqIiIiIiPhO2J7eWcTNwERjTA6wCehjrd1ujHkf+BiXfPbzxr0deMoYUx1YA8yvpDKKiIiIiIj4TtiSPmvtBuBs7/MXQJsQ46QD6UWGfYt7qqeIiIiIiIgcIr2cXURERERExMeU9ImIiIiIiPiYkj4REREREREfU9InIiIiIiLiY0r6REREREREfExJn4iIiIiIiI8p6RMREREREfExJX0iIiIiIiI+pqRPRERERETEx5T0iYiIiIiI+JiSPhERERERER9T0iciIiIiIuJjSvpERERERER8TEmfiIiIiIiIj8WWZyRjTD3gKCAXuBOYYK1dEc6CiYiIiIiIyKEr75W+p4FjgdHAW8D4sJVIREREREREKkx5k75Y4D0gxVr7HBATviKJiIiIiIhIRSlv0lcdeAR4zxhzAeXsFioiIiIiIiKRVd6k7zrAAmOAVOBv4SqQiIiIiIiIVJzyJn3rgRzgbuA3YHvYSiQiIiIiIiIVptRumsaYRkBT4CrgF+D/gGW4B7tcFvbSiYiIiIiIyCEp60rfm8BG4Dhr7T1AlrX2VSA57CUTkQqRWCue1NSkYv9EREREpGoo64EsHwGtgRhjTB0AY0wSkB/ugolIxYiPiyVtyOvFhm8Y0zECpRERERGRylZq0metvcEYkwz8AHwI1AOWAgMroWwiIiIiIiJyiMp89YK1NhNYAhhjTKq19vfwF0tEREREREQqQrnet2eM6Qv0BWoYYwCw1p4YxnKJiIiIiIhIBSjvS9YH4J7WuS2MZREREREREZEKVt6kbyXwk7U2L5yFERERERERkYpV3qTvbWC9MWYdEAUErLUXhq9YIiIiIiIiUhHKm/T1Ba4EMsJYFhEREREREalg5U36NgKfWWv1fj4REREREZEjSHmTvjjgS2PMV0AAwFrbM2ylEhERERERkQpRatJnjKlhrd0DPFBJ5REREREREZEKVNaVvlnGmADwDvC6tXZjJZRJREREREREKkipSZ+1tocxJg74E3CXMeYPwCrgNWvtJ5VRQBERObLEspfU1KRiw/NzstiamRuBEomIiFRtZd7TZ63NBt7w/mGMOQX3onYlfSIiUkxUtRqQnlxseHR6JrCj8gskIiJSxZXrQS7GmLOB64FquPf01QfGhLFcgs6Wi4iIiIjIoSvv0zsfB8YD3XHdO6uHrURSSGfLRURERETkUEWXc7wMa+1cYLu1Nh34Y/iKJCIiIiIiIhWlvElfwBhzEpBgjDFA3TCWSURERERERCpIeZO+fwIn4bp5zgGmhK1EIiIiIiIiUmHKejl7rLU2F1jr/QM4J+ylEhERERERkQpR1oNcngZ6AhYI4J7cife5SRjLJSIiIiIiIhWgrJez9/T+b1w5xREREREREZGKVFb3zndwV/WKClhr/xSeIomIiIiIiEhFKat7503e/yOABcCHwFnA5eEslIiIiIiIiFSMsrp3WgBjzLHW2nne4JeNMbeGvWQiIiIiIiJyyMq60lfIGNML+BRoA+wOW4lERERERESkwpT3PX1XA82BMcDxQI+wlUhEREREREQqTLmSPmvtJuBN3H19s4C8cBZKREREREREKkZZT++sZa3dbowZDfwROAHIAe4CrqqE8onIESqxVjzxceXuQS4iIiIiYVJWi2wEcDvQzlp7njHmHWvtLGPMzWXN2BjTGnjQWnu+MaYpMBP3+oevgH7W2nxjzAigI5ALDLTWflrSuAe5fCISIfFxsaQNeb3Y8A1jOkagNCIiIiJVV1ndO0d7/8caY2oAAWNMDGV07zTGDAamATW8QY8Aw6y15wJRQBdjTEugPdAa+CswqaRxD2yRREREREREpEBZr2zY6n18BFgGpAKfeH+XZh3wZ2C29/cZwBLv8yLgIsACi621AeBHY0ysMSa1hHFfLu8CyaGLZS+pqUnFhufnZLE1MzcCJRIRERERkYNV1j19M4L+XAf8gOt22QGYU9J01toXjTFpQYOivOQOYAeQDNQCtgaNUzA81LiliomJIiUloazRDlpMTHRY538wwlmeqGoxkF58tUenZ5KSErln+ETqN6hqcSMZu6rFjWTsqha3KgtnHRnJ+jFSsata3EjGrmpxIxm7qsWNZOxIxS3rnr5WQALwDPAcrrvlwQi+Jy8JyAC2e5+LDg81bqny8gJkZITv1YEpKQlhnX9JQl1tKxDO8kQqbiRj+zluaTHCGTtScUui7do/cQ9m26rKwllHRqp+jGTsqhY3krGrWtxIxq5qcSMZO5xxS6sfS72nz1p7CtAVd2/eEOAcYJ219s0DLMNyY8z53udLgfeBD4GLjTHRxpiGQLS1dksJ44qIiIiIiMhBKPN56tbar3AJH8aY84AHjDENrLVnH0Cc24GnjDHVgTXAfGttnjHmfeBjXPLZr6RxDyCOiIiIiIiIBCnXS7SMMbWAbrh389XEdfcslbV2A3C29/lb3JM6i46TDqQXGRZyXBERERERETlwZT3I5QpcotcQeAm4yUvmqhQ9zVJERERERI5UZV3pex74BvgSOBkYbYwBwFrbM7xFO3xEVatR4tMs3QNGRUREREREDk9lJX0XVEopREREREREJCzKejn7ktK+FxERERERkcNbqa9sEBERERERkSNbuZ7eKSJypEisFU98nA5tIiIiIgXUMhIRX4mPiyVtyOvFhm8Y0zECpRERERGJPCV9IpVAV59EREREJFLUChWpBLr6JCIiIiKRoge5iIiIiIiI+JiSPhERERERER9T0iciIiIiIuJjSvpERERERER8TEmfiIiIiIiIjynpExERERER8TElfSIiIiIiIj6mpE9ERERERMTH9HJ2EZEjXGKteOLjdDgXERGR0NRKEBE5wsXHxZI25PViwzeM6RiB0oiIiMjhRt07RUREREREfExJn4iIiIiIiI8p6RMREREREfExJX0iIiIiIiI+pqRPRERERETEx5T0iYiIiIiI+Jhe2SAiUkH0vjwRERE5HKl1IiJSQfS+PBERETkcqXuniIiIiIiIjynpExERERER8TElfSIiIiIiIj6mpE9ERERERMTHlPSJiIiIiIj4mJ7eKRGhR9uLiIiIiFQOtbolIvRoexERERGRyqHunSIiIiIiIj6mpE9ERERERMTHlPSJiIiIiIj4mJI+ERERERERH1PSJyIiIiIi4mNK+kRERERERHxMSZ+IiIiIiIiPKekTERERERHxMSV9IiIiIiIiPqakT0RERERExMeU9ImIiIiIiPiYkj4REREREREfU9InIiIiIiLiY0r6REREREREfExJn4iIiIiIiI/FRroAEjmJteKJj9MmICIiIiLiZ2rxV2HxcbGkDXm92PANYzpGoDQiIiIiIhIOlZr0GWOWA5nen98DTwKPAbnAYmvtSGNMNPAEcCqQDdxorf2uMssp/qWrmyIiIiJS1VRa69cYUwPAWnt+0LAVwF+A9cDrxpiWQBpQw1p7jjHmbOBhoEtllVP8TVc3RURERKSqqcxLHqcCCcaYxV7cdCDOWrsOwBjzJvAnoB7wbwBr7VJjTKtKLKOIiIiIiIivVGbStxsYB0wDmgGLgIyg73cATYBa7OsCCpBnjIm11uaWNOOYmChSUhIqvsTloLj+j13V4kYydlWLG8nYVS1uVRbOOjImJjpiv2mkYle1uJGMXdXiRjJ2VYsbydiRiluZSd+3wHfW2gDwrTEmEzg66PskXBKY4H0uEF1awgeQlxcgI2N3RZe3UGpqUonfHclxS5t/OONGMnZVixvJ2FUtbiRjR3KZQzkcj11VWTjryJSUhLBuS4dj7KoWN5Kxq1rcSMauanEjGTuccUurHyvzPX034O7PwxhTH5fc7TLGHGeMiQIu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\n",
      "text/plain": [
       "<Figure size 1080x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "width = 0.2\n",
    "f, (ax1, ax2) = plt.subplots(1,2, figsize=(15,5), sharey = True)\n",
    "ax1.bar(range(len(data_set_final[data_set_final['Chuva'] > 0].groupby('Month').mean()['Subscribers'])),data_set_final[data_set_final['Chuva'] > 0].groupby('Month').mean()['Subscribers'], width = width, label = 'Subscribers Chuva')\n",
    "ax1.bar([0.2,1.2,2.2,3.2,4.2,5.2,6.2,7.2,8.2,9.2,10.2,11.2],data_set_final[data_set_final['Chuva'] == 0].groupby('Month').mean()['Subscribers'], width = width, label = 'Subscribers Não Chuva')\n",
    "ax1.set_xticks([0.1,1.1,2.1,3.1,4.1,5.1,6.1,7.1,8.1,9.1,10.1,11.1])\n",
    "ax1.set_xticklabels(['J','F','M','A','M','J','J','A','S','O','N','D'])\n",
    "ax1.set_title('Bicicletas alugadas ao longo de 2017 por Subscribers em dias de chuva\\n')\n",
    "ax1.set_ylabel('Média/mês')\n",
    "ax1.legend()\n",
    "\n",
    "ax2.bar(range(len(data_set_final[data_set_final['Chuva'] > 0].groupby('Month').mean()['Customers'])),data_set_final[data_set_final['Chuva'] > 0].groupby('Month').mean()['Customers'], width = width, label = 'Customers Chuva')\n",
    "ax2.bar([0.2,1.2,2.2,3.2,4.2,5.2,6.2,7.2,8.2,9.2,10.2,11.2],data_set_final[data_set_final['Chuva'] == 0].groupby('Month').mean()['Customers'], width = width, label = 'Customers Não Chuva')\n",
    "ax2.set_xticks([0.1,1.1,2.1,3.1,4.1,5.1,6.1,7.1,8.1,9.1,10.1,11.1])\n",
    "ax2.set_xticklabels(['J','F','M','A','M','J','J','A','S','O','N','D'])\n",
    "ax2.set_title('Bicicletas alugadas ao longo de 2017 por Customers em dias de chuva \\n')\n",
    "ax2.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apesar do impacto evidente da chuva, **o mês mais quente do ano** - Junho - **tem uma similaridade de clientes com day-pass em dias de chuva e em dias secos**.\n",
    "<br>\n",
    "Isso nos leva a reflexão sobre eventuais campanhas mesmo em dias de chuva para alavancar o uso das bicicletas nesse mês.\n",
    "<br>\n",
    "Além disso, essa variável se mostrou mais uma vez útil quando formos fazer nosso modelo de propensão ao uso."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Preparação para modelagem\n",
    "Vamos retomar que nosso objetivo aqui é de **criar um modelo de propensão da quantidade de bicicletas por dia e hora**.\n",
    "<br>\n",
    "Com isso, vamos ajustar nossa base para rodar alguns modelos e avaliar resultados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Criamos uma cópia para a modelagem\n",
    "data_set_modelo = data_set_final.reset_index()\n",
    "\n",
    "#Selecionando apenas as variáveis que vão se modelar\n",
    "X = data_set_modelo[['Month', 'Day', 'Hour',\n",
    "       'Dia da Semana', 'Chuva', 'Neve', 'CLG', 'SKC', 'TEMP', 'DEWP',\n",
    "       'Feriado']]\n",
    "\n",
    "#Selecionando a variável alvo\n",
    "y = data_set_modelo[['Total']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import make_pipeline, FeatureUnion, Pipeline\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "#Meu primeiro passo é criar um custom transformer para apenas selecionar as colunas que desejo\n",
    "class ColumnSelector(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, columns):\n",
    "        self.columns = columns\n",
    "\n",
    "    def fit(self, X, y=None):\n",
    "        return self\n",
    "\n",
    "    def transform(self, X):\n",
    "        assert isinstance(X, pd.DataFrame)\n",
    "\n",
    "        try:\n",
    "            return X[self.columns]\n",
    "        except KeyError:\n",
    "            cols_error = list(set(self.columns) - set(X.columns))\n",
    "            raise KeyError(\"The DataFrame does not include the columns: %s\" % cols_error)\n",
    "\n",
    "#O segundo passo é direcionar as colunas de acordo com sua classificação\n",
    "class SelectType(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, dtype):\n",
    "        self.dtype = dtype\n",
    "    \n",
    "    def fit(self, X, y = None):\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X):\n",
    "        return X.select_dtypes(include = [self.dtype])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Agora vamos criar um pipeline de dados para: escolher as colunas corretas do modelo,\n",
    "#dividir a base de acordo com seu tipo,\n",
    "#gerar variáveis binárias para colunas categorizadas,\n",
    "#normalizar as variáveis numéricas.\n",
    "\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "preprocessing_pipeline = make_pipeline(\n",
    "    ColumnSelector(columns=['Month', 'Day', 'Hour',\n",
    "       'Dia da Semana', 'Chuva', 'Neve', 'CLG', 'SKC', 'TEMP', 'DEWP',\n",
    "       'Feriado']),\n",
    "    FeatureUnion(transformer_list = [\n",
    "    ('Numbers', make_pipeline(\n",
    "        SelectType(np.number), SimpleImputer(strategy='median'), StandardScaler())),\n",
    "    ('Object', make_pipeline(\n",
    "        SelectType('object'), SimpleImputer(strategy='most_frequent'), OneHotEncoder(handle_unknown=\"ignore\")))\n",
    "])\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Por quê fizemos isso?**\n",
    "<br>\n",
    "Nosso objetivo é de gerar cross-validations ao longo da nossa base, com o objetivo de selecionar um modelo que seja estável e com **capacidade de generalizar o resultado em bases desconhecidas**.\n",
    "<br>\n",
    "<br>\n",
    "O pipeline de dados garantirá que não haverá o evento de **vazamento de dados** entre as bases de teste e as bases de treino, e portanto teremos resultados mais confiáveis para decidir o modelo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Modelagem e Otimização\n",
    "\n",
    "<br>\n",
    "Nossa métrica de avaliação escolhida para essa regressão é o RMSE.\n",
    "<br>\n",
    "<br>\n",
    "Cada modelo a seguir passará por diferentes combinações de parâmetros para encontrar sua melhor performance.\n",
    "<br>\n",
    "Cada uma dessas combinações será analisada cinco vezes por bases divididas de formas diferentes, com o objetivo de aumentar a confiabilidade do nosso resultado.\n",
    "<br>\n",
    "<br>\n",
    "Vamos para nosso primeiro modelo: Ridge Regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-906870.6560808584"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "classifier_pipeline_ridge = make_pipeline(preprocessing_pipeline,\n",
    "                                    Ridge()\n",
    ")\n",
    "\n",
    "param_grid = {\"ridge__alpha\": [0.01, 0.1, 1, 10, 20, 30, 40, 50, 60, 70, 80, 100]}\n",
    "\n",
    "classifier_model_ridge = GridSearchCV(classifier_pipeline_ridge, param_grid, cv=5, scoring = 'neg_mean_squared_error')\n",
    "classifier_model_ridge.fit(X,y)\n",
    "classifier_model_ridge.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Agora vamos para nosso segudo modelo: ***Lasso***."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-902843.0152884991"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "classifier_pipeline_lasso = make_pipeline(preprocessing_pipeline,\n",
    "                                      Lasso())\n",
    "\n",
    "param_grid = {\"lasso__alpha\": [0.01, 0.1, 1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200]}\n",
    "\n",
    "classifier_model_lasso = GridSearchCV(classifier_pipeline_lasso, param_grid, cv=5, scoring = 'neg_mean_squared_error')\n",
    "classifier_model_lasso.fit(X,y)\n",
    "classifier_model_lasso.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vamos seguir para o nosso terceiro modelo: ***Kernel Ridge***."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-912159.0529186665"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.kernel_ridge import KernelRidge\n",
    "\n",
    "classifier_pipeline_krr = make_pipeline(preprocessing_pipeline,\n",
    "                                      KernelRidge())\n",
    "\n",
    "param_grid = {\"kernelridge__alpha\": [0.01, 0.1, 1, 10]}\n",
    "\n",
    "classifier_model_krr = GridSearchCV(classifier_pipeline_krr, param_grid, cv=5, scoring = 'neg_mean_squared_error')\n",
    "classifier_model_krr.fit(X,y)\n",
    "classifier_model_krr.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Próximo modelo: ***Random Forest***."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1872366.3937164024"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "classifier_pipeline_rf = make_pipeline(preprocessing_pipeline,\n",
    "                                      RandomForestRegressor())\n",
    "\n",
    "param_grid = {\"randomforestregressor__max_depth\": [2,3,4]}\n",
    "\n",
    "classifier_model_rf = GridSearchCV(classifier_pipeline_rf, param_grid, cv=5, scoring = 'neg_mean_squared_error')\n",
    "classifier_model_rf.fit(X,y)\n",
    "classifier_model_rf.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-475130.22400070226"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "\n",
    "classifier_pipeline_xg = make_pipeline(preprocessing_pipeline,\n",
    "GradientBoostingRegressor())\n",
    "\n",
    "param_grid = {'gradientboostingregressor__n_estimators': [100,200], 'gradientboostingregressor__max_depth': [3,4], 'gradientboostingregressor__min_samples_split': [2],\n",
    "          'gradientboostingregressor__learning_rate': [0.01,0.1,1,10], 'gradientboostingregressor__loss': ['ls']}\n",
    "\n",
    "classifier_model_xgboost = GridSearchCV(classifier_pipeline_xg, param_grid, cv=5, scoring = 'neg_mean_squared_error')\n",
    "\n",
    "classifier_model_xgboost.fit(X,y)\n",
    "classifier_model_xgboost.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "O melhor resultado que tivemos foi do **XGBoost**.\n",
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Desfecho e Recomendações"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- O período de inverno é o maior ponto de atenção durante o ano, pois a utilização do serviço cai drasticamente. Para enfrentar esse ponto, recomenda-se ações de incentivo (com parcerias e novos planos) durante esse intervalo para estimular o consumo;\n",
    "- O fim de semana é bastante consumido com day-passes. Para atingir esse nicho, um plano específico para esse perfil de cliente pode ser uma opção para up-sell. Recomenda-se uma exploração maior para entender ainda a diferença entre locais/turistas.\n",
    "- Feriados reduzem muito a utilização do serviço para subscribers, entretanto há uma oportunidade para day-passes com um volume interessante. A recomendação é que esse público sujeito a experimentação seja afetado por uma régua de relacionamento com objetivo de oferecer um plano de entretenimento ou de rotina.\n",
    "- As chuvas impactam o uso de bicicletas, porém no mês mais quente há um impacto menor. Esse fator pode ser um gatilho para campanhas envolvendo capas e parcerias durante dias quentes mesmo com chuva. Além disso, consolidamos esse fator como uma variável relevante para o modelo de propensão de uso de bicicletas (a ser discutido a seguir).\n",
    "- Foi desenvolvimento um modelo em Machine Learning para prever a utilização de bicicletas. Esse sistema pode ajudar na tomada de decisão do planejamento de compras de bicicletas, suporte técnico de atendimento e manutenção, além como um auxílio na projeção eficiente de fluxo de caixa.\n",
    "\n",
    "Além disso, para recomendações de estudos futuros:\n",
    "- Otimização da localização das estações;\n",
    "- Otimização da capacidade de cada estação;\n",
    "- Otimização do fluxo de bicicletas entre estações;"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
